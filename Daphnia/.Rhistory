install.packages("tidyverse")
library(tidyverse)
install.packages("lme4")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
install.packages("callr")
install.packages("processx")
setwd("C:/Users/Jo/OneDrive/Documents/GitHub/Species-Traits/RDS_compiled")
source("../transfer_functions.R")
source("treatments.R")
library(deSolve)
param <- read.csv("parameters_no_cerio.csv")
state <- c(dammonium = 4.4,
daph_j = 0,
daph_a = 20,
dalgae = 15
)
#parameters- will need parameters for each function
parameters_med <- c(
alpha = 4.379716e-03, beta = 29,
death1 = .007, death2 = 0.000082,
gamma =  0.365 , omega = 10.5,
growth_a = median(param$growth_a), growth_b = median(param$growth_b),
death_b = median(param$death_b), a_feed_m = median(param$a_feed_m),
a_exc_m = median(param$a_exc_m), j_feed_m = median(param$j_feed_m),
j_exc_m = median(param$j_exc_m), amm_param_b = median(param$amm_param_b),
fec_a = median(param$fec_a), fec_b = median(param$fec_b)
)
d_equations <-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
# ammonium is added from release by both juvenile and adult daphnia
ddammonium <- daph_a*a_exc_m*a_feed_m*dalgae + daph_j*a_exc_m*j_feed_m*dalgae -  ## need to fix excretion- not right
dalgae*dammonium*alpha*omega/(omega+dammonium) +
# ((dammonium*alpha*omega/(omega+dammonium)) / 10) * (death1*dalgae + death2*(dalgae^2)) -
gamma/2 * (death1*dalgae + death2*(dalgae^2)) -
# lagvalue(t - 5, 1) -
(1-amm_param_b)*dammonium
ddaph_j <- sat_fun(fec_a,fec_b,dalgae)*daph_a - daph_j*(35/70)
#daphnia adults are added from growth by juveniles and are lost from death
ddaph_a <- 1/(sat_fun(growth_a,growth_b,dalgae))*daph_j- daph_a*(1/death_b)
ddalgae <- beta * dalgae*dammonium*alpha*omega/(omega+dammonium) - death1*dalgae - death2*(dalgae^2)-
daph_a*a_feed_m*dalgae - daph_j*j_feed_m*dalgae
# return the rate of change
list(c(ddammonium, ddaph_j,ddaph_a,ddalgae))
}) # end with(as.list ...
}
out_med <- ode(y = state, times = seq(0,42,0.1), func = d_equations, parms = parameters_med)
parameters_upp <- c(
alpha = 4.379716e-03, beta = 29,
death1 = .007, death2 = 0.000082,
gamma =  0.365 , omega = 10.5,
growth_a = quantile(param$growth_a, c(0.975), names = F), growth_b = quantile(param$growth_b,c(0.975), names = F),
death_b = quantile(param$death_b,c(0.975), names = F), a_feed_m = quantile(param$a_feed_m,c(0.975), names = F),
a_exc_m = quantile(param$a_exc_m,c(0.975), names = F), j_feed_m = quantile(param$j_feed_m,c(0.975), names = F),
j_exc_m = quantile(param$j_exc_m,c(0.975), names = F), amm_param_b = quantile(param$amm_param_b,c(0.975), names = F),
fec_a = quantile(param$fec_a,c(0.975), names = F), fec_b = quantile(param$fec_b,c(0.975), names = F)
)
out_up <- ode(y = state, times = seq(0,42,0.1), func = d_equations, parms = parameters_upp)
parameters_low <- c(
alpha = 4.379716e-03, beta = 29,
death1 = .007, death2 = 0.000082,
gamma =  0.365 , omega = 10.5,
growth_a = quantile(param$growth_a, c(0.025), names = F), growth_b = quantile(param$growth_b,c(0.025), names = F),
death_b = quantile(param$death_b,c(0.025), names = F), a_feed_m = quantile(param$a_feed_m,c(0.025), names = F),
a_exc_m = quantile(param$a_exc_m,c(0.025), names = F), j_feed_m = quantile(param$j_feed_m,c(0.025), names = F),
j_exc_m = quantile(param$j_exc_m,c(0.025), names = F), amm_param_b = quantile(param$amm_param_b,c(0.025), names = F),
fec_a = quantile(param$fec_a,c(0.025), names = F), fec_b = quantile(param$fec_b,c(0.025), names = F)
)
out_low <- ode(y = state, times = seq(0,42,0.1), func = d_equations, parms = parameters_low)
pred <- as.data.frame(out_low)
pred$quantile <- "low"
predup <- as.data.frame(out_up)
predup$quantile <- "upper"
predmed <- as.data.frame(out_med)
predmed$quantile <- "med"
## daph only
dat_daph <- dat %>% filter(treatment == 3) %>% filter(NH4 < 20)%>%
filter(Chl < 100, Chl >= 0) %>% select(TankNum, NH4, Chl,Day)
library(tidyverse)
## daph only
dat_daph <- dat %>% filter(treatment == 3) %>% filter(NH4 < 20)%>%
filter(Chl < 100, Chl >= 0) %>% select(TankNum, NH4, Chl,Day)
names(dat_daph) <- c("TankNum", "dammonium","dalgae","time")
amm_g <- ggplot(predmed, aes(time,dammonium)) + geom_line(linetype = "solid")+
geom_line(data= predup, linetype = "dotdash") + geom_line(data=pred, linetype ="dotdash")+
theme_bw()+ geom_point(data = dat_daph,aes(time,dammonium) )+
ylab("Ammonium mg/L")+xlab("Days")+
theme(axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 32),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 32),
strip.text = element_text(size = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank())
amm_g
(alg_g <- ggplot(predmed, aes(time,dalgae)) + geom_line(linetype = "solid")+
geom_line(data= predup, linetype = "dotdash") + geom_line(data=pred, linetype ="dotdash")+
theme_bw()+ geom_point(data = dat_daph,aes(time,dalgae) )+
ylab("Chl a ug/L")+xlab("Days")+
theme(axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 32),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 32),
strip.text = element_text(size = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank()) )
source("pop_curves.R")
dj <- popA %>% filter(treatment == 3) %>% group_by(TankNum,ExptDay) %>% summarize (daph_a = mean(count, na.rm = T)*100)
names(dj) = c("TankNum", "time","daph_a")
(dapha_g <- ggplot(predmed, aes(time,daph_a)) + geom_line(linetype = "solid")+
geom_line(data= predup, linetype = "dotdash") + geom_line(data=pred, linetype ="dotdash")+
theme_bw()+ geom_point(data = dj,aes(time,daph_a) )+
ylab("Daphnia/L")+xlab("Days")+
theme(axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 32),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 32),
strip.text = element_text(size = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank()) )
djuv <- popJ %>% filter(treatment == 3) %>% group_by(TankNum,ExptDay) %>% summarize (daph_j = mean(count, na.rm = T)*100)
names(djuv) = c("TankNum", "time","daph_j")
(daphj_g <- ggplot(predmed, aes(time,daph_j)) + geom_line(linetype = "solid")+
geom_line(data= predup, linetype = "dotdash") + geom_line(data=pred, linetype ="dotdash")+
theme_bw()+ geom_point(data = djuv,aes(time,daph_j) )+
ylab("Daphnia/L")+xlab("Days")+
theme(axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 32),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 32),
strip.text = element_text(size = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank()) )
(daphj_g <- ggplot(predmed, aes(time,daph_j)) + geom_line(linetype = "solid")+
geom_line(data= predup, linetype = "dotdash") + geom_line(data=pred, linetype ="dotdash")+
theme_bw()+ geom_point(data = djuv,aes(time,daph_j) )+
ylab("Juvenile Daphnia/L")+xlab("Days")+
theme(axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 32),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 32),
strip.text = element_text(size = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank()) )
param <- read.csv("parameters_no_cerio.csv")
state <- c(dammonium = 4.4,
dalgae = 15
)
#parameters- will need parameters for each function
parameters_med <- c(
alpha = 4.379716e-03, beta = 29,
death1 = .007, death2 = 0.000082,
gamma =  0.365 , omega = 10.5,
amm_param_b = median(param$amm_param_b)
)
d_equations <-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
ddammonium <-  -dalgae*dammonium*alpha*omega/(omega+dammonium) +
gamma * (death1*dalgae + death2*(dalgae^2)) -
# lagvalue(t - 5, 1) -
(1-amm_param_b)*dammonium
ddalgae <- beta * dalgae*dammonium*alpha*omega/(omega+dammonium) - death1*dalgae - death2*(dalgae^2)
# return the rate of change
list(c(ddammonium,ddalgae))
}) # end with(as.list ...
}
out_med <- ode(y = state, times = seq(0,42,0.1), func = d_equations, parms = parameters_med)
plot(out_med)
d_equations <-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
ddammonium <-  -dalgae*dammonium*alpha*omega/(omega+dammonium) +
gamma/2 * (death1*dalgae + death2*(dalgae^2)) -
# lagvalue(t - 5, 1) -
(1-amm_param_b)*dammonium
ddalgae <- beta * dalgae*dammonium*alpha*omega/(omega+dammonium) - death1*dalgae - death2*(dalgae^2)
# return the rate of change
list(c(ddammonium,ddalgae))
}) # end with(as.list ...
}
out_med <- ode(y = state, times = seq(0,42,0.1), func = d_equations, parms = parameters_med)
plot(out_med)
parameters_upp <- c(
alpha = 4.379716e-03, beta = 29,
death1 = .007, death2 = 0.000082,
gamma =  0.365 , omega = 10.5,
amm_param_b = quantile(param$amm_param_b,c(0.975), names = F)
)
out_up <- ode(y = state, times = seq(0,42,0.1), func = d_equations, parms = parameters_upp)
plot(out_up)
parameters_low <- c(
alpha = 4.379716e-03, beta = 29,
death1 = .007, death2 = 0.000082,
gamma =  0.365 , omega = 10.5,
amm_param_b = quantile(param$amm_param_b,c(0.025), names = F)
)
out_low <- ode(y = state, times = seq(0,42,0.1), func = d_equations, parms = parameters_low)
plot(out_low)
pred <- as.data.frame(out_low)
pred$quantile <- "low"
predup <- as.data.frame(out_up)
predup$quantile <- "upper"
predmed <- as.data.frame(out_med)
predmed$quantile <- "med"
## daph only
dat_alg <- dat %>% filter(treatment == 1) %>% filter(NH4 < 20)%>%
filter(Chl < 100, Chl >= 0) %>% select(TankNum, NH4, Chl,Day)
names(dat_alg) <- c("TankNum", "dammonium","dalgae","time")
amm_g <- ggplot(predmed, aes(time,dammonium)) + geom_line(linetype = "solid")+
geom_line(data= predup, linetype = "dotdash") + geom_line(data=pred, linetype ="dotdash")+
theme_bw()+ geom_point(data = dat_alg,aes(time,dammonium) )+
ylab("Ammonium mg/L")+xlab("Days")+
theme(axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 32),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 32),
strip.text = element_text(size = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank())
amm_g
(alg_g <- ggplot(predmed, aes(time,dalgae)) + geom_line(linetype = "solid")+
geom_line(data= predup, linetype = "dotdash") + geom_line(data=pred, linetype ="dotdash")+
theme_bw()+ geom_point(data = dat_alg,aes(time,dalgae) )+
ylab("Chl a ug/L")+xlab("Days")+
theme(axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 32),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 32),
strip.text = element_text(size = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank()) )
state <- c(dammonium = 4.4,
dalgae = 15
)
#parameters- will need parameters for each function
parameters_med <- c(
alpha = 4.379716e-03, beta = 29,
death1 = .007, death2 = 0.000082,
gamma =  0.365 , omega = 10.5,
amm_param_b = median(param$amm_param_b)
)
d_equations <-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
ddammonium <-  -dalgae*dammonium*alpha*omega/(omega+dammonium) +
gamma/2 * (death1*dalgae + death2*(dalgae^2)) -
# lagvalue(t - 5, 1) -
(1-amm_param_b)*dammonium
ddalgae <- beta * dalgae*dammonium*alpha*omega/(omega+dammonium) - death1*dalgae - death2*(dalgae^2)
# return the rate of change
list(c(ddammonium,ddalgae))
}) # end with(as.list ...
}
out_med <- ode(y = state, times = seq(0,42,0.1), func = d_equations, parms = parameters_med)
plot(out_med)
parameters_upp <- c(
alpha = 4.379716e-03, beta = 29,
death1 = .007, death2 = 0.000082,
gamma =  0.365 , omega = 10.5,
amm_param_b = quantile(param$amm_param_b,c(0.975), names = F)
)
out_up <- ode(y = state, times = seq(0,42,0.1), func = d_equations, parms = parameters_upp)
plot(out_up)
parameters_low <- c(
alpha = 4.379716e-03, beta = 29,
death1 = .007, death2 = 0.000082,
gamma =  0.365 , omega = 10.5,
amm_param_b = quantile(param$amm_param_b,c(0.025), names = F)
)
out_low <- ode(y = state, times = seq(0,42,0.1), func = d_equations, parms = parameters_low)
plot(out_low)
pred <- as.data.frame(out_low)
pred$quantile <- "low"
predup <- as.data.frame(out_up)
predup$quantile <- "upper"
predmed <- as.data.frame(out_med)
predmed$quantile <- "med"
## alg only
dat_alg <- dat %>% filter(treatment == 1) %>% filter(NH4 < 20)%>%
filter(Chl < 100, Chl >= 0) %>% select(TankNum, NH4, Chl,Day)
names(dat_alg) <- c("TankNum", "dammonium","dalgae","time")
amm_g <- ggplot(predmed, aes(time,dammonium)) + geom_line(linetype = "solid")+
geom_line(data= predup, linetype = "dotdash") + geom_line(data=pred, linetype ="dotdash")+
theme_bw()+ geom_point(data = dat_alg,aes(time,dammonium) )+
ylab("Ammonium mg/L")+xlab("Days")+
theme(axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 32),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 32),
strip.text = element_text(size = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank())
(alg_g <- ggplot(predmed, aes(time,dalgae)) + geom_line(linetype = "solid")+
geom_line(data= predup, linetype = "dotdash") + geom_line(data=pred, linetype ="dotdash")+
theme_bw()+ geom_point(data = dat_alg,aes(time,dalgae) )+
ylab("Chl a ug/L")+xlab("Days")+
theme(axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 32),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 32),
strip.text = element_text(size = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank()) )
setwd("C:/Users/Jo/OneDrive/Documents/GitHub/Species-Traits/Daphnia")
daph <- read.csv("daphnia_lifetime.csv")
daph <- daph %>%
filter(adult_only=="N")
## to get fecundity parameter fit saturating curve (params z and w in full ode)
## need to make per day so need to divide total fecundity by # of days that individual was an adult
daph_fec <- daph %>% group_by(rep, treatment) %>%
filter(size_class == "A") %>%
summarize(
time_adult = n()
, life_fec   = sum(clutch_size, na.rm = TRUE)
, chl        = mean(chl_avg)
, chl_sd_rep = sd(chl_avg)) %>%
mutate(daily_fec = life_fec / time_adult)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
daph_fec_r <- daph_fec %>% select(rep, chl, daily_fec)
daph_fec_r$rep <- seq(1,70)
daph_fec_r <- data.frame(daph_fec_r)
daph_fec_list <- list(
"N" = 70,
"chl" = daph_fec_r$chl,
"daily_fec" = daph_fec_r$daily_fec
)
fit <- stan(file = "fec_stan.stan",
data = daph_fec_list,
control = list(adapt_delta = 0.95))
t <- rstan::extract(fit,permuted = FALSE)
fit_sum <- summary(fit)
fit_sum_param <- fit_sum$summary[c(1:4),]
## right now only 2 chain want all 4 eventually
a_pred <- rbind(t[,1,1],t[,2,1], t[,3,1], t[,4,1]) ## all rows, first chain, alpha
b_pred <- rbind(t[,1,2], t[,2,2], t[,3,2], t[,4,2])
newdat <- data.frame(chl = seq(0,100))
pred_out <- apply(newdat,1,sat_fun,a=a_pred,b=b_pred)
pred_sum <- apply(pred_out, 2, FUN = function (x) quantile(x, c(0.025,0.50,0.975)))
lower <- data.frame(chl = seq(0,100), daily_fec = pred_sum[1,])
upper <- data.frame(chl = seq(0,100), daily_fec = pred_sum[3,])
med <- data.frame(chl = seq(0,100), daily_fec = pred_sum[2,])
ggplot(daph_fec_r, aes(chl, daily_fec)) + geom_point(alpha = 0.6, size = 2 )+
geom_line(data = lower, linetype = "dotdash", lwd = 1.25) + geom_line(data = upper, linetype = "dotdash", lwd = 1.25)+
geom_line(data = med, linetype = "solid", lwd =1.25) + xlab("Daily Chl a ug/L") + ylab("Daily Fecundity")+
theme_bw() + theme(axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 32),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 32),
strip.text = element_text(size = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank())
daph <- read.csv("daphnia_lifetime.csv")
# filter out individuals that were NOT born in the conditions (original daphnia)
daph <- daph %>%
filter(adult_only=="N")
dA <-  daph %>%
filter(size_class == "A")
daph_adult_death <-  dA %>%
group_by(rep,treatment) %>%
summarize(days_adult = n(),
chl = mean(chl_avg),
chl_sd_rep = sd(chl_avg))
survcurve <- function(x) {
x <- c(0,sort(x))
tibble(day=x,frac_surv=seq(1,0,length.out=length(x)))
}
daph_surv_curves <- daph_adult_death %>%
group_by(treatment) %>%
do(survcurve(.$days_adult))
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(shinystan)
daph_death_list <- list(
"N" = 74,
"days" = daph_surv_curves$day,
"survival" = daph_surv_curves$frac_surv
)
fit <- stan(file = "adult_death.stan",
data = daph_death_list,
control = list(adapt_delta = 0.95,
max_treedepth = 12))
## for ODE 1/beta is the rate- beta is the number of days until 1/e are lost
fit_sum <- summary(fit)
fit_sum_param <- fit_sum$summary[c(1:4),]
t <- rstan::extract(fit,permuted = FALSE)
b_pred <- rbind(t[,1,1],t[,2,1],t[,3,1],t[,4,1])
newdat <- data.frame(days = seq(0,60))
pred_out <- apply(newdat,1,expon,b=b_pred)
pred_sum <- apply(pred_out, 2, FUN = function (x) quantile(x, c(0.025,0.50,0.975)))
lower <- data.frame(day = seq(0,60), frac_surv = pred_sum[1,])
upper <- data.frame(day = seq(0,60), frac_surv = pred_sum[3,])
med <- data.frame(day = seq(0,60), frac_surv= pred_sum[2,])
ggplot(daph_surv_curves, aes(day, frac_surv)) + geom_point(alpha = 0.6, size = 2 ) +
geom_line(data = lower, linetype = "dotdash", lwd = 1.25) + geom_line(data = upper, linetype = "dotdash", lwd = 1.25)+
geom_line(data = med, linetype = "solid", lwd =1.25) + xlab("Day") + ylab("Proportion Surviving")+
theme_bw() + theme(axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 32),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 32),
strip.text = element_text(size = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank())
