cite(vegan)
library(vegan)
cite("vegan")
?cite
citation("vegan")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
## trying again to get diff eqs correct
devtools::install_github("parksw3/boms")
## install
devtools::install_github("parksw3/fitode")
## install
devtools::install_github("parksw3/fitode")
install.packages("glmmTMB")
library(glmmTMB)
install.packages("TMB", type = "Source")
install.packages("TMB", type = "source")
install.packages("TMB", type = "Source")
library(glmmTMB)
install.packages("glmmTMB")
library(glmmTMB)
library(lme4)
install.packages("lme4")
library(lme4)
install.packages("lme4")
library(lme4)
## simulate data
#devtools::install_github("parksw3/fitode")
library(fitode)
cammonium = (1-9.4235e-01)
chl_nh4_mod3 <- odemodel(
name = "algal_nit",
model = list(
pred_nh4 ~ -a*pred_chl*(pred_nh4/(k+pred_nh4))+r*death*pred_chl-cammonium,
pred_chl ~ a*pred_chl*(pred_nh4/(k+pred_nh4)) - death*pred_chl
),
observation = list(
nh4 ~ dlnorm(meanlog = log(pred_nh4), sdlog = 0.05),
chl ~ dlnorm(meanlog = log(pred_chl), sdlog = 0.01)
),
initial = list(pred_nh4 ~ pred_nh40 , pred_chl ~ pred_chl0),
par=c("a","k", "r","death", "pred_nh40", "pred_chl0")
)
start3 <- c(a = 0.03,
k = .03,
r = 1,
death = 0.02,
pred_nh40= 15,
pred_chl0 = 40
)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start3, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
plot(s3$times, s3$chl)
plot(s3$times, s3$nh4)
fit3 <- fitode(
chl_nh4_mod3,
data = s3,
start=start3,
tcol = "times",
solver.opts=list(method="rk4", hini=0.1)
)
coef(fit3)
st <- expand.grid(
a = seq(0.01,0.5,0.04),
k = seq(0.01,0.5,0.04),
r = seq(0.01,1,0.08),
death = seq(0.001,0.05,0.004),
pred_nh40 = 15,
pred_chl0 = 40
)
temp <- data.frame (
a =  0,
k = 0,
r = 0,
death = 0,
pred_nh40 = 15,
pred_chl0 = 40,
lowa = 0,
lowk = 0,
lowr = 0,
lowdeath = 0,
lownh4 = 0,
lowchl = 0,
higha = 0,
highk = 0,
highr = 0,
highdeath = 0,
highnh4 = 0,
highchl = 0,
loglik = 0,
ttime  = 0
)
for(i in 1:nrow(st)) {
newstart <- with(st[i,],
list(
a =  a,
k = k,
r=r,
death = death,
pred_nh40 = pred_nh40,
pred_chl0 = pred_chl0
))
x <- system.time({
tempm <- try((fitode(chl_nh4_mod3, data= s3, start = newstart, tcol = "times",
solver.opts = list(method="rk4", hini=0.1))),silent = TRUE)
if (class(tempm) == "try-error") {
temp[i,] <- "NA"
} else {
temp[i,1:6] <- coef(tempm)
temp[i,7:12] <- confint(tempm)[,2]
temp[i,13:18] <- confint(tempm)[,3]
temp$loglik[i] <- logLik(tempm)
}})
temp$ttime[i] <- x[[3]]
print(i/nrow(st))
}
dat <- temp %>% filter(a != "NA")
library(tidyverse)
dat <- temp %>% filter(a != "NA")
nrow(temp) ## 300
nrow(dat)  ## 18
dat
write.csv(dat, file = "filtered_sim.csv")
write.csv(temp, file = "unfiltered_sim.csv")
getwd()
?deSolve
library(deSolve)
?deSolve
## find equilibrium
library(rootSolve)
?multiroot
setwd("~/GitHub/Species-Traits/Daphnia")
source("../transfer_functions.R")
library(tidyverse)
rdat <- read.csv("Daphnia_large_Feeding_Nov11.csv")
cont <- rdat %>%
mutate(Chl_Time_Diff_day = (Chl_Time_Diff/60)/24,Nh4_Time_Diff_day = (Nh4_Time_Diff/60)/24) %>%
filter(control == 2) %>%
mutate(chl_diff =(chl1-chl2)/Chl_Time_Diff_day, nh4_diff= (nh42-nh41)/Nh4_Time_Diff_day) %>% # subtract 1 from 2 for change over time
group_by(Treatment) %>%
summarize(mean_chl = mean(chl_diff, na.rm = T), mean_nh4 = mean(nh4_diff,na.rm = T)) ## onr row in treatment 3 is all NAs..??
## add mean control avg back to main dataframe
dat <- left_join(rdat,cont)
dat <- dat %>%
filter(control == 1) %>%
mutate(Chl_Time_Diff_day = (Chl_Time_Diff/60)/24,Nh4_Time_Diff_day = (Nh4_Time_Diff/60)/24) %>%
mutate(chl_diff = (chl1-chl2)/Chl_Time_Diff_day, nh4_diff = (nh41-nh42)/Nh4_Time_Diff_day) %>%
mutate(chl_diff_cc = (chl_diff-mean_chl)/Num_Daphnia, nh4_diff_cc = (nh4_diff-mean_nh4)/Num_Daphnia)
dat1 <- dat %>% filter(control == 1) %>% filter(!is.na(chl_diff_cc)) %>% ## 1 entry is NA
select(Rep, Treatment,chl1,nh41, chl_diff_cc,nh4_diff_cc, Num_Daphnia)
lm(data = dat1, nh4_diff_cc ~1/chl_diff_cc)
ggplot(dat1, aes(1/chl_diff_cc,nh4_diff_cc)) + geom_point()+ geom_smooth(method = "lm")
ggplot(dat1, aes(chl_diff_cc,nh4_diff_cc)) + geom_point()+ geom_smooth(method = "lm")
f<- lm(data = dat1, nh4_diff_cc ~1/chl_diff_cc)
mod_lm <- lm(data = dat1, nh4_diff_cc ~1/chl_diff_cc)
newdata1 = data.frame(chl1 = seq(5,22,0.1))
newpred5 <- predict(mod_lm, newdata = newdata1)
newdata1 = data.frame(chl_diff_cc = seq(5,22,0.1))
newpred5 <- predict(mod_lm, newdata = newdata1)
plot(seq(5,22,0.1), newpred5)
points(dat1$chl_diff_cc,dat1$nh4_diff_cc)
plot(seq(5,22,0.1), newpred5)
points(dat1$chl_diff_cc,dat1$nh4_diff_cc)
points(dat1$chl_diff_cc,dat1$nh4_diff_cc, color = "red")
dev.off()
newpred5
mod_lm <- lm(data = dat1, nh4_diff_cc ~1/chl_diff_cc+b)
mod_nh4 <- lm(data = dat1, nh4_diff_cc ~ nh41)
mod_int_only <- lm(data = dat1, nh4_diff_cc ~1)
mod_sat <- nlxb(data = dat1, nh4_diff_cc ~ (nh41*a)/(nh41+b), start = list(a=1,b=1))
newpred <- sat_fun(k= seq(5,22,.1), a=1667 ,b =9905303)
newdata = data.frame(nh41 = seq(5,22,0.1))
newpred2 <- predict(mod_nh4, newdata = newdata)
newpred3 <- predict(mod_int_only, newdata = newdata)
plot(seq(5,22,0.1), newpred2)
points(dat1$nh41,dat1$nh4_diff_cc)
newdata1 = data.frame(chl_diff_cc = seq(0,22,0.1))
newpred5 <- predict(mod_lm, newdata = newdata1)
plot(seq(0,22,0.1), newpred5)
points(dat1$chl_diff_cc,dat1$nh4_diff_cc)
newdata1 = data.frame(chl_diff_cc = seq(0,10,0.1))
newpred5 <- predict(mod_lm, newdata = newdata1)
plot(seq(0,10,0.1), newpred5)
points(dat1$chl_diff_cc,dat1$nh4_diff_cc)
newpred5
dat1$nh4_diff_cc
plot(dat1$chl_diff_cc,dat1$nh4_diff_cc)
newdata1 = data.frame(chl_diff_cc = seq(0,15,0.1))
newpred5 <- predict(mod_lm, newdata = newdata1)
plot(dat1$chl_diff_cc,dat1$nh4_diff_cc)
points(seq(0,15,0.1), newpred5)
with(dat1, plot(nh41, nh4_diff_cc))
mod <- nls(data = dat1, chl_diff_cc ~ (chl1*h)/(1+chl1*h*r), start = list(h=1,r=1))
library(nlmrt)
mod_sig <- nlxb(data=dat1, chl_diff_cc ~ (a*chl1^b)/(c+chl1^b), start = list(a=1,b=0.1,c=1))
mod_sat <- nlxb(data = dat1, chl_diff_cc ~ (chl1*a)/(chl1+b), start = list(a=1,b=1))
mod_lm <- lm(data = dat1, chl_diff_cc ~ chl1)
newpred <- sig_fun(k= seq(1,100,1), a = 0.154319 , b = 0.861941, c = 83.8371)
plot(seq(1,100,1), newpred)
points(dat1$chl1,dat1$chl_diff_cc)
points(dat1$chl1,dat1$chl_diff_cc)
newdata = data.frame(chl1 = seq(1,100,1))
newpred <- sat_fun(k= seq(1,100,1), a=960892 ,b =1339121459)
newpred1 <- predict(mod_lm, newdata = newdata )
plot(seq(1,100,1), newpred)
points(seq(1,100,1),newpred1)
points(dat1$chl1,dat1$chl_diff_cc)
mod_lm
mod_lm2 <- lm(data = dat1, chl_diff_cc ~ chl1-1)
summary(mod_lm2)
plot(predict(mod_lm2))
p <- predict(mod_lm2)
str(p)
plot(p)
plot(dat1$chl1,p)
points(dat1$chl1, dat1$chl)
dev.off()
plot(dat1$chl1,p)
points(dat1$chl1, dat1$chl_diff_cc)
#######  fit in stan
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(shinystan)
daph_grow_list <- list(
"N" = nrow(dat1),
"chl" = dat1$chl1,
"diff" = dat1$chl_diff_cc
)
fit <- stan(file = "adult_feeding.stan",
data = daph_grow_list, control = list(max_treedepth = 12))
launch_shinystan(fit)
fit_sum <- summary(fit)
(fit_sum_param <- fit_sum$summary[c(1:4),])
saveRDS(fit, file = "adult_feeding.RDS")
t <- rstan::extract(fit,permuted = FALSE)
m_pred <- rbind(t[,1,1],t[,2,1],t[,3,1],t[,4,1])
b_pred <- rbind(t[,1,2],t[,2,2],t[,3,2],t[,4,2])
newdat <- data.frame(chl1 = seq(0,100))
pred_out <- apply(newdat,1,lin,m= m_pred, b=b_pred)
pred_sum <- apply(pred_out, 2, FUN = function (x) quantile(x, c(0.025,0.50,0.975)))
with(dat1, plot(chl1, chl_diff_cc))
lines(seq(0,100), pred_sum[1,])
lines(seq(0,100), pred_sum[2,])
lines(seq(0,100), pred_sum[3,])
t <- rstan::extract(fit,permuted = FALSE)
newdat <- data.frame(chl1 = seq(0,100))
pred_out <- apply(newdat,1,lin,m= m_pred)
pred_out <- apply(newdat,1,lin,m= m_pred)
lin2 <- function(m,c){
m*c
}
pred_out <- apply(newdat,1,lin2,m= m_pred)
pred_sum <- apply(pred_out, 2, FUN = function (x) quantile(x, c(0.025,0.50,0.975)))
with(dat1, plot(chl1, chl_diff_cc))
lines(seq(0,100), pred_sum[1,])
lines(seq(0,100), pred_sum[2,])
lines(seq(0,100), pred_sum[3,])
head(pred_sum)
head(fit_sum_param)
str(fit_sum_param)
a_feed_m = fit_sum_param[1,6]
newmod <- lm(data = dat1, nh4_diff_cc ~ a_feed_m*chl1-1)
a_feed_m
newmod <- lm(data = dat1, nh4_diff_cc ~ 0.09057521*chl1 -1)
newmod <- nlxb(data = dat1, nh4_diff_cc ~ a_feed_m*chl1)
?nlxb
newmod <- nlxb(data = dat1, nh4_diff_cc ~ a_feed_m*chl1*m, start = list(m=1))
summary(newmod)
summary(newmod)
newmod
min(dat1$chl1)
max(dat1$chl1)
newdata2 = data.frame(chl1 = seq(0,110,1))
newpred6 <- predict(newmod, newdata = newdata2)
newmod <- nls(data = dat1, nh4_diff_cc ~ a_feed_m*chl1*m, start = list(m=1))
newdata2 = data.frame(chl1 = seq(0,110,1))
newpred6 <- predict(newmod, newdata = newdata2)
plot(seq(0,110,10), newpred6)
plot(seq(0,110,1), newpred6)
plot(dat1$chl1,dat1$nh4_diff_cc)
points(seq(0,110,1), newpred6)
a_feed_m1 <- 1/a_feed_m
newmod <- nls(data = dat1, nh4_diff_cc ~ a_feed_m1*chl1*m, start = list(m=1))
newdata2 = data.frame(chl1 = seq(0,110,1))
newpred6 <- predict(newmod, newdata = newdata2)
#plot(seq(0,110,1), newpred6)
plot(dat1$chl1,dat1$nh4_diff_cc)
points(seq(0,110,1), newpred6)
