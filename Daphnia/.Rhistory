library(vegan)
?rda
?cmdscale
?cca
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
library(rstan)
setwd("C:/Users/Jo/OneDrive/Documents/GitHub/Species-Traits/Daphnia")
library(tidyverse)
daph <- read.csv("daphnia_lifetime.csv")
daph <- daph %>%
filter(adult_only=="N")
## to get fecundity parameter fit saturating curve (params z and w in full ode)
## need to make per day so need to divide total fecundity by # of days that individual was an adult
daph_fec <- daph %>% group_by(rep, treatment) %>%
filter(size_class == "A") %>%
summarize(
time_adult = n()
, life_fec   = sum(clutch_size, na.rm = TRUE)
, chl        = mean(chl_avg)
, chl_sd_rep = sd(chl_avg)) %>%
mutate(daily_fec = life_fec / time_adult)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
daph_fec_r <- daph_fec %>% select(rep, chl, daily_fec)
daph_fec_r$rep <- seq(1,70)
daph_fec_r <- data.frame(daph_fec_r)
daph_fec_list <- list(
"N" = 70,
"chl" = daph_fec_r$chl,
"daily_fec" = daph_fec_r$daily_fec
)
fit <- stan(file = "fec_stan.stan",
data = daph_fec_list,
control = list(adapt_delta = 0.95))
fit <- stan(file = "fec_stan.stan",
data = daph_fec_list,
control = list(adapt_delta = 0.95))
fit_sum <- summary(fit)
print(names(fit_sum))
?extract
t <- extract(fit)
detach(tidyverse)
detach("tidyverse")
detach(package = "tidyverse")
?detach
?extract
detach("package:tidyr", unload = TRUE)
t <- rstan::extract(fit,permuted = FALSE)
t
str(t)
## manual and a bit wrong
a_pred <- t[,1,1]
names(t[,1,1])
head(t)
head(t[,1,1])
## manual and a bit wrong
a_pred <- t[,1,1] ## all rows, first chain, alpha
b_pred <- t[,1,2]
newdat <- data.frame(chl = seq(0,75))
pred_out <- apply(newdat,1,sat_fun,a=a_pred,b=b_pred)
sat_fun_inv <- function(a,b,k) {
(k + b) / (a * k)
}
pred_out <- apply(newdat,1,sat_fun,a=a_pred,b=b_pred)
# saturating function for nutrient release where K is independent state variable
sat_fun <- function(a,b,k) {
a * k / (k + b)
}
pred_out <- apply(newdat,1,sat_fun,a=a_pred,b=b_pred)
pred_sum <- apply(pred_out, 2, FUN = function (x) quantile(x, c(0.025,0.50,0.975)))
with(daph_fec_r, plot(chl, daily_fec))
lines(seq(0,75), pred_sum[1,])
lines(seq(0,75), pred_sum[2,])
lines(seq(0,75), pred_sum[3,])
hist(t[,1,4], breaks = 200)
## right now only 1 chain want all 4 eventually
a_pred <- t[,1:4,1] ## all rows, first chain, alpha
str(a_pred)
## right now only 1 chain want all 4 eventually
a_pred <- rbind(t[,1,1],t[,2,1]) ## all rows, first chain, alpha
b_pred <- rbind(t[,1,2], t[,2,1])
newdat <- data.frame(chl = seq(0,75))
pred_out <- apply(newdat,1,sat_fun,a=a_pred,b=b_pred)
pred_sum <- apply(pred_out, 2, FUN = function (x) quantile(x, c(0.025,0.50,0.975)))
with(daph_fec_r, plot(chl, daily_fec))
lines(seq(0,75), pred_sum[1,])
lines(seq(0,75), pred_sum[2,])
lines(seq(0,75), pred_sum[3,])
hist(a_pred, breaks = 300)
install.packages("shinystan")
library(shinystan)
newdat <- data.frame(chl = seq(0,75))
## right now only 1 chain want all 4 eventually
a_pred <- rbind(t[,1,1],t[,2,1]) ## all rows, first chain, alpha
b_pred <- rbind(t[,1,2], t[,2,2])
newdat <- data.frame(chl = seq(0,75))
pred_out <- apply(newdat,1,sat_fun,a=a_pred,b=b_pred)
pred_sum <- apply(pred_out, 2, FUN = function (x) quantile(x, c(0.025,0.50,0.975)))
with(daph_fec_r, plot(chl, daily_fec))
lines(seq(0,75), pred_sum[1,])
lines(seq(0,75), pred_sum[2,])
lines(seq(0,75), pred_sum[3,])
