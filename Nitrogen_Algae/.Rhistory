cite(vegan)
library(vegan)
cite("vegan")
?cite
citation("vegan")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
## trying again to get diff eqs correct
devtools::install_github("parksw3/boms")
## install
devtools::install_github("parksw3/fitode")
## install
devtools::install_github("parksw3/fitode")
install.packages("glmmTMB")
library(glmmTMB)
install.packages("TMB", type = "Source")
install.packages("TMB", type = "source")
install.packages("TMB", type = "Source")
library(glmmTMB)
install.packages("glmmTMB")
library(glmmTMB)
library(lme4)
install.packages("lme4")
library(lme4)
install.packages("lme4")
library(lme4)
## simulate data
#devtools::install_github("parksw3/fitode")
library(fitode)
cammonium = (1-9.4235e-01)
chl_nh4_mod3 <- odemodel(
name = "algal_nit",
model = list(
pred_nh4 ~ -a*pred_chl*(pred_nh4/(k+pred_nh4))+r*death*pred_chl-cammonium,
pred_chl ~ a*pred_chl*(pred_nh4/(k+pred_nh4)) - death*pred_chl
),
observation = list(
nh4 ~ dlnorm(meanlog = log(pred_nh4), sdlog = 0.05),
chl ~ dlnorm(meanlog = log(pred_chl), sdlog = 0.01)
),
initial = list(pred_nh4 ~ pred_nh40 , pred_chl ~ pred_chl0),
par=c("a","k", "r","death", "pred_nh40", "pred_chl0")
)
start3 <- c(a = 0.03,
k = .03,
r = 1,
death = 0.02,
pred_nh40= 15,
pred_chl0 = 40
)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start3, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
plot(s3$times, s3$chl)
plot(s3$times, s3$nh4)
fit3 <- fitode(
chl_nh4_mod3,
data = s3,
start=start3,
tcol = "times",
solver.opts=list(method="rk4", hini=0.1)
)
coef(fit3)
st <- expand.grid(
a = seq(0.01,0.5,0.04),
k = seq(0.01,0.5,0.04),
r = seq(0.01,1,0.08),
death = seq(0.001,0.05,0.004),
pred_nh40 = 15,
pred_chl0 = 40
)
temp <- data.frame (
a =  0,
k = 0,
r = 0,
death = 0,
pred_nh40 = 15,
pred_chl0 = 40,
lowa = 0,
lowk = 0,
lowr = 0,
lowdeath = 0,
lownh4 = 0,
lowchl = 0,
higha = 0,
highk = 0,
highr = 0,
highdeath = 0,
highnh4 = 0,
highchl = 0,
loglik = 0,
ttime  = 0
)
for(i in 1:nrow(st)) {
newstart <- with(st[i,],
list(
a =  a,
k = k,
r=r,
death = death,
pred_nh40 = pred_nh40,
pred_chl0 = pred_chl0
))
x <- system.time({
tempm <- try((fitode(chl_nh4_mod3, data= s3, start = newstart, tcol = "times",
solver.opts = list(method="rk4", hini=0.1))),silent = TRUE)
if (class(tempm) == "try-error") {
temp[i,] <- "NA"
} else {
temp[i,1:6] <- coef(tempm)
temp[i,7:12] <- confint(tempm)[,2]
temp[i,13:18] <- confint(tempm)[,3]
temp$loglik[i] <- logLik(tempm)
}})
temp$ttime[i] <- x[[3]]
print(i/nrow(st))
}
dat <- temp %>% filter(a != "NA")
library(tidyverse)
dat <- temp %>% filter(a != "NA")
nrow(temp) ## 300
nrow(dat)  ## 18
dat
write.csv(dat, file = "filtered_sim.csv")
write.csv(temp, file = "unfiltered_sim.csv")
getwd()
library(fitode)
set.seed(101)
max_param_set <- 10 ## number of parameter sets to try
llist <- lme4:::namedList
## cammonium = (1-9.4235e-01) ## measured ammonium loss in abiotic system
cammonium = 0
chl_nh4_mod3 <- odemodel(
name = "algal_nit",
model = list(
pred_nh4 ~ -a*pred_chl*(pred_nh4/(k+pred_nh4))+r*death*pred_chl-cammonium,
pred_chl ~  e*a*pred_chl*(pred_nh4/(k+pred_nh4)) - death*pred_chl
),
observation = list(
nh4 ~ dlnorm(meanlog = log(pred_nh4), sdlog = 0.05),
chl ~ dlnorm(meanlog = log(pred_chl), sdlog = 0.01)
),
initial = list(pred_nh4 ~ pred_nh40 , pred_chl ~ pred_chl0),
par=c("a","k", "r","death","e", "pred_nh40", "pred_chl0")
)
start <- c(a = 0.03,
k = .03,
r = 1,
death = 0.02,
e = 1,
pred_nh40= 15,
pred_chl0 = 40
)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
plot(s3@solution$pred_nh4)
plot(s3$times, s3$pred_nh4)
plot(s3$times, s3$pred_chl)
plot(s3$times, s3$chl)
start2 <- c(a = 0.5,
)
start2 <- c(a = 0.5,
k = .03,
r = 0.7,
death = 0.002,
e = 0.3,
pred_nh40= 15,
pred_chl0 = 40)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start2, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
plot(s3$times, s3$nh4)
plot(s3$times, s3$chl)
start2 <- c(a = 0.03,
k = .03,
r = 0.7,
death = 0.002,
e = 0.3,
pred_nh40= 15,
pred_chl0 = 40)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start2, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
plot(s3$times, s3$nh4)
plot(s3$times, s3$chl)
start2 <- c(a = 0.03,
k = .03,
r = 0.7,
death = 0.002,
e = 0.02,
pred_nh40= 15,
pred_chl0 = 40)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start2, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
plot(s3$times, s3$nh4)
plot(s3$times, s3$chl)
start2 <- c(a = 0.03,
k = .03,
r = 0.7,
death = 0.002,
e = 0.2,
pred_nh40= 15,
pred_chl0 = 40)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start2, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
plot(s3$times, s3$nh4)
plot(s3$times, s3$chl)
start2 <- c(a = 0.03,
k = .03,
r = 0.7,
death = 0.02,
e = 0.2,
pred_nh40= 15,
pred_chl0 = 40)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start2, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
plot(s3$times, s3$nh4)
plot(s3$times, s3$chl)
start2 <- c(a = 0.03,
k = .03,
r = 0.8,
death = 0.02,
e = 0.2,
pred_nh40= 15,
pred_chl0 = 40)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start2, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
plot(s3$times, s3$nh4)
plot(s3$times, s3$chl)
start2 <- c(a = 0.03,
k = .03,
r = 0.8,
death = 0.01,
e = 0.2,
pred_nh40= 15,
pred_chl0 = 40)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start2, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
plot(s3$times, s3$nh4)
plot(s3$times, s3$chl)
start2 <- c(a = 0.03,
k = .03,
r = 1,
death = 0.01,
e = 0.2,
pred_nh40= 15,
pred_chl0 = 40)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start2, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
plot(s3$times, s3$nh4)
plot(s3$times, s3$chl)
start2 <- c(a = 0.03,
k = .03,
r = 1,
death = 0.01,
e = 0.4,
pred_nh40= 15,
pred_chl0 = 40)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start2, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
plot(s3$times, s3$nh4)
plot(s3$times, s3$chl)
s4 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start2, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
fitode(chl_nh4_mod3, data= s4, start = start2, tcol = "times",
solver.opts = solver.opts)
fitode(chl_nh4_mod3, data= s4, start = start2, tcol = "times")
start <- c(a = 0.03,
k = .03,
r = 1,
death = 0.02,
e = 1,
pred_nh40= 15,
pred_chl0 = 40
)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
fitode(chl_nh4_mod3, data= s3, start = start, tcol = "times")
?fitode
s3 <-  simulate(chl_nh4_mod3,nsim = 1, parms= start, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
fitode(chl_nh4_mod3, data= s3, start = start, tcol = "times")
fitode(chl_nh4_mod3, data= s4, start = start2, tcol = "times",solver.opts = list(method = "rk4"))
fitode(chl_nh4_mod3, data= s4, start = start2, tcol = "times",solver.opts = list(method = "lsoda"))
## try with different start values to see if converge at true parameter
params <- c("a","k","r","death","e", "pred_nh40","pred_chl0")
st <- expand.grid(
a = seq(0.01,0.5,0.04),
k = seq(0.01,0.5,0.04),
r = seq(0.01,1,0.08),
death = seq(0.001,0.05,0.004),
pred_nh40 = 15,
pred_chl0 = 40
)
m <- min(max_param_set,nrow(st))
## construct column names; t transposes; c flattens
cnames <- c(t(outer(c("","low","high"),params,paste0)),"loglik","ttime")
## set up columns of NAs
temp <- as.data.frame(replicate(length(cnames),rep(NA,m)))
names(temp) <- cnames
fitfun <- function(model, start,
solver.opts = list(method="lsoda"))  {
tt <- system.time({
tempm <- try(fitode(model, data= s4, start = start2, tcol = "times",
solver.opts = solver.opts),
silent = TRUE)
})
attr(tempm,"time") <- tt
return(tempm)
}
sumfun <- function(fit) {
res <- rep(NA,ncol(temp))
names(res) <- colnames(temp)
if (!inherits(fit, "try-error")) {
res[1:6] <- coef(fit)
res[7:12] <- confint(fit)[,2]
res[13:18] <- confint(fit)[,3]
res["loglik"] <- logLik(fit)
}
res["ttime"] <- attr(fit,"time")[[3]]
return(res)
}
temp_models <- list()
for(i in 1:m) {
newstart <- with(st[i,],
llist(a, k, r, death,e, pred_nh40, pred_chl0))
ff <- fitfun(chl_nh4_mod3_G, newstart)
temp[i,] <- sumfun(ff)
cat(i,"/",m,"\n")
}
st <- expadn.grid(
a = seq(0.01,0.5,0.04),
k = seq(0.01,0.5,0.04),
r = seq(0.01,1,0.08),
death = seq(0.001,0.05,0.004),
e = seq(0.01,1,0.08),
pred_nh40 = 15,
pred_chl0 = 40
)
st <- expand.grid(
a = seq(0.01,0.5,0.04),
k = seq(0.01,0.5,0.04),
r = seq(0.01,1,0.08),
death = seq(0.001,0.05,0.004),
e = seq(0.01,1,0.08),
pred_nh40 = 15,
pred_chl0 = 40
)
m <- min(max_param_set,nrow(st))
temp_models <- list()
for(i in 1:m) {
newstart <- with(st[i,],
llist(a, k, r, death,e, pred_nh40, pred_chl0))
ff <- fitfun(chl_nh4_mod3_G, newstart)
temp[i,] <- sumfun(ff)
cat(i,"/",m,"\n")
}
temp_models
ff
for(i in 1:m) {
newstart <- with(st[i,],
llist(a, k, r, death,e, pred_nh40, pred_chl0))
ff <- fitfun(chl_nh4_mod3, newstart)
temp[i,] <- sumfun(ff)
cat(i,"/",m,"\n")
}
temp_models
temp
str(temp)
st <- st[20:40,]
m <- min(max_param_set,nrow(st))
temp2 <- as.data.frame(replicate(length(cnames),rep(NA,m)))
names(temp2) <- cnames
temp_models <- list()
for(i in 1:m) {
newstart <- with(st[i,],
llist(a, k, r, death,e, pred_nh40, pred_chl0))
ff <- fitfun(chl_nh4_mod3, newstart)
temp2[i,] <- sumfun(ff)
cat(i,"/",m,"\n")
}
setwd("~/GitHub/Species-Traits")
nrow(st)
st <- expand.grid(
a = seq(0.01,0.5,0.04),
k = seq(0.01,0.5,0.04),
r = seq(0.01,1,0.08),
death = seq(0.001,0.05,0.004),
e = seq(0.01,1,0.08),
pred_nh40 = 15,
pred_chl0 = 40
)
nrow(st)
row_samp <- sample(1:nrow(st), 100, replace = F)
row_samp
max_param_set <- 100 ## number of parameter sets to try
new_ls <- st[row_samp,]
new_ls
nrow(new_ls)
m <- min(max_param_set,nrow(new_ls))
## construct column names; t transposes; c flattens
cnames <- c(t(outer(c("","low","high"),params,paste0)),"loglik","ttime")
## set up columns of NAs
temp <- as.data.frame(replicate(length(cnames),rep(NA,m)))
names(temp) <- cnames
setwd("~/GitHub/Species-Traits/Nitrogen_Algae")
ammonium <- read.csv("Nh4_Air.csv")
ammonium <- ammonium %>% drop_na()
library(tidyverse)
ammonium <- read.csv("Nh4_Air.csv")
ammonium <- ammonium %>% drop_na()
#same early morning machine problem
ammonium <- ammonium %>%
filter(Rep != 1 & Rep != 15 & Rep != 52) ## not sure about 52 but obvi outlier so check when measured
ammonium <- ammonium %>% group_by(Treat) %>% mutate(med_val = median(NH4)) %>%
mutate(weights = 1/(2/med_val)) ## 2 is 2 mg/L which is the obs error based on guide to YSI
amm  <- ammonium %>%
arrange(Treat, Rep, Day) %>%
group_by(Treat, Rep) %>%
mutate(diff = NH4 / lag(NH4)) %>%
ungroup %>%
mutate(weights_scaled = weights/max(weights), center_NH4 = NH4 - mean(NH4))
library(lme4)
nit <- c(2.9,
0.029,
0.047,
0.064,
0.14,
0.085,
0.032,
0.18.
0.05,
0.007,
0.004,
0.949431344,
0.142046306,
0.194992396,
2.03456917,
2.50165992,
0.821949496,
0.348347577
)
nit <- c(2.9,0.029,0.047,0.064,0.14,0.085,0.032,0.18,0.05,0.007,0.004,0.949431344,0.142046306,0.194992396,2.03456917,2.50165992,0.821949496,0.348347577)
hist(nit)
?hist
hist(nit,10)
hist(nit,20)
hist(nit,25)
??fitdist
library(fitdistrplus)
fitdist(nit,"lnorm")
exp(-1.922832)
