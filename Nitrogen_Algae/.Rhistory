cite(vegan)
library(vegan)
cite("vegan")
?cite
citation("vegan")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
## trying again to get diff eqs correct
devtools::install_github("parksw3/boms")
## install
devtools::install_github("parksw3/fitode")
## install
devtools::install_github("parksw3/fitode")
install.packages("glmmTMB")
library(glmmTMB)
install.packages("TMB", type = "Source")
install.packages("TMB", type = "source")
install.packages("TMB", type = "Source")
library(glmmTMB)
install.packages("glmmTMB")
library(glmmTMB)
library(lme4)
install.packages("lme4")
library(lme4)
install.packages("lme4")
library(lme4)
## simulate data
#devtools::install_github("parksw3/fitode")
library(fitode)
cammonium = (1-9.4235e-01)
chl_nh4_mod3 <- odemodel(
name = "algal_nit",
model = list(
pred_nh4 ~ -a*pred_chl*(pred_nh4/(k+pred_nh4))+r*death*pred_chl-cammonium,
pred_chl ~ a*pred_chl*(pred_nh4/(k+pred_nh4)) - death*pred_chl
),
observation = list(
nh4 ~ dlnorm(meanlog = log(pred_nh4), sdlog = 0.05),
chl ~ dlnorm(meanlog = log(pred_chl), sdlog = 0.01)
),
initial = list(pred_nh4 ~ pred_nh40 , pred_chl ~ pred_chl0),
par=c("a","k", "r","death", "pred_nh40", "pred_chl0")
)
start3 <- c(a = 0.03,
k = .03,
r = 1,
death = 0.02,
pred_nh40= 15,
pred_chl0 = 40
)
s3 <-  simulate(chl_nh4_mod3,nsim = 5, parms= start3, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
plot(s3$times, s3$chl)
plot(s3$times, s3$nh4)
fit3 <- fitode(
chl_nh4_mod3,
data = s3,
start=start3,
tcol = "times",
solver.opts=list(method="rk4", hini=0.1)
)
coef(fit3)
st <- expand.grid(
a = seq(0.01,0.5,0.04),
k = seq(0.01,0.5,0.04),
r = seq(0.01,1,0.08),
death = seq(0.001,0.05,0.004),
pred_nh40 = 15,
pred_chl0 = 40
)
temp <- data.frame (
a =  0,
k = 0,
r = 0,
death = 0,
pred_nh40 = 15,
pred_chl0 = 40,
lowa = 0,
lowk = 0,
lowr = 0,
lowdeath = 0,
lownh4 = 0,
lowchl = 0,
higha = 0,
highk = 0,
highr = 0,
highdeath = 0,
highnh4 = 0,
highchl = 0,
loglik = 0,
ttime  = 0
)
for(i in 1:nrow(st)) {
newstart <- with(st[i,],
list(
a =  a,
k = k,
r=r,
death = death,
pred_nh40 = pred_nh40,
pred_chl0 = pred_chl0
))
x <- system.time({
tempm <- try((fitode(chl_nh4_mod3, data= s3, start = newstart, tcol = "times",
solver.opts = list(method="rk4", hini=0.1))),silent = TRUE)
if (class(tempm) == "try-error") {
temp[i,] <- "NA"
} else {
temp[i,1:6] <- coef(tempm)
temp[i,7:12] <- confint(tempm)[,2]
temp[i,13:18] <- confint(tempm)[,3]
temp$loglik[i] <- logLik(tempm)
}})
temp$ttime[i] <- x[[3]]
print(i/nrow(st))
}
dat <- temp %>% filter(a != "NA")
library(tidyverse)
dat <- temp %>% filter(a != "NA")
nrow(temp) ## 300
nrow(dat)  ## 18
dat
write.csv(dat, file = "filtered_sim.csv")
write.csv(temp, file = "unfiltered_sim.csv")
getwd()
setwd("~/GitHub/Species-Traits")
lit <- read.csv("literature_extraction.csv")
## construct prior distributions for parameters from literature values
library(tidyverse)
death1 <- lit %>% dplyr::select("Replicates","Genus","species","death_rate","units_death","X95_conf_death",
"sd_death","range_death") %>% filter(death_rate != "NA")
death1
head(lit)
names(lit)
## daphnia adult uptake algae
f <- lit %>% dplyr::select("Replicates","Max_filtering","sd_filtering","CI_filtering_upper","CI_filtering_low","units",
"daphnia_size") %>% filter(Max_filtering != "NA")
f
names(lit)
## nitrification
n <- lit %>%dplyr::select("Replicates","nitrification","units.6", "convert_mg_N_day", "sd.2","range.2","X75.quartile") %>%
filter(nitrification != "NA")
n
fec_lit <- lit %>% dplyr::select(c("daphnia_reproduction", "sd_repro", "units_reproduction", "Replicates")) %>%
filter(daphnia_reproduction != "NA")
q <- fitdist(fec_lit$daphnia_reproduction, "dlnorm")
library(fitdistrplus)
q <- fitdist(fec_lit$daphnia_reproduction, "dlnorm")
?fitdist
q <- fitdist(fec_lit$daphnia_reproduction, "lnorm")
y=seq(0,2, length = 100)
c <-dlnorm(y, meanlog = q$estimate[1], sdlog = q$estimate[2])
c
df<- data.frame(
y = y,
daphnia_reproduction = c
)
### ahhh why can't i get this to work at all?????????
p <- ggplot(fec_lit) +
geom_histogram(aes(x = daphnia_reproduction, y = ..density..),
binwidth = .1, fill = "grey", color = "black")
p
hist(fec_lit$daphnia_reproduction)
p + geom_line(data = df, aes(x = daphnia_reproduction, y = y), color = "red")
q <- fitdist(fec_lit$daphnia_reproduction, "norm")
q
fec_lit
n
names(lit)
## nitrification
n <- lit %>%dplyr::select("Replicates","nitrification","units.6", "convert_mg_N_day", "sd.2","range.2","X75.quartile","Title") %>%
filter(nitrification != "NA")
n
n[8,]
n[17,]
setwd("~/GitHub/CSI_Dispersal/Werba_Data_Analyses_Manuscript_Effects of diversity and coalescence of species assemblages")
library(lme4)
library(vegan)
library(tidyverse)
full_data <-read.csv("family_data.csv")
#remove tank B7 which didn't exist due to leaking
full_data <- full_data[-which(full_data$Replicate =="B" & full_data$Treatment==7),]
#make just a community dataframe
community <- full_data %>%
dplyr::select(-c(Date,Day,Replicate,Treatment,Salinity_Treat,Dispersal,Salinity_Measured))
richness <- specnumber(community, MARGIN = 1)
#calculate shannon's diversity
shannon_div <- diversity(community, index = "shannon", MARGIN = 1, base = exp(2))
#calculate evenness -- Pielous evennnes shannon diversity/ log(richness)
evenness <- shannon_div/log(richness)
#make a dataframe with all alpha diversity indices and all data from full data
alpha <- as.data.frame(cbind(full_data,richness, shannon_div,evenness))
alpha$Rep <- paste(alpha$Replicate,alpha$Treatment)
# remove source tanks
no_source_all <- alpha[alpha$Dispersal!= 0 & alpha$Dispersal!=1, ]
# ony source tanks
source_all <- alpha[alpha$Dispersal== 0, ]
Rich_no_source2<-glmer(richness~as.factor(Dispersal)*Day+
Salinity_Measured*Day+ as.factor(Dispersal)+
(1+Day|Rep),data = no_source_all,family = "poisson" )
Rich_no_source1<-glm(richness~as.factor(Dispersal)*Day+Salinity_Measured*Day,data = no_source_all,family = quasipoisson(link = "log"))
# richness over time given treatment for non-source tanks
# I used poisson because it is count data but was slightly underdispersed so switched to quasipoisson- same for both
Rich_no_source<-glmer.nb(richness~
Salinity_Measured*as.factor(Dispersal)+
Salinity_Measured*Day+
(1+Day|Rep),
data = no_source_all,family = quasipoisson(link = "log"))
summary(Rich_no_source)
new_corr <- glmer.nb(richness~
Salinity_Measured*as.factor(Dispersal)+
Salinity_Measured*Day+
(1+Day|Rep),
data = no_source_all,family = quasipoisson(link = "log"),
correlation=corCAR1(form=~Day|Rep))
??corARMA
library(nlme)
new_corr <- glmer.nb(richness~
Salinity_Measured*as.factor(Dispersal)+
Salinity_Measured*Day+
(1+Day|Rep),
data = no_source_all,family = quasipoisson(link = "log"),
correlation=corARMA(form=~Day|Rep))
?isSingular
source("Beta_Diversity_PCoA_and_PERMANOVA.R")
source("Graphing_Set_Up.R")
library(tidyverse)
### plot source and non-source togther for supplement
graph_dat3 <- data.frame (cbind(all_3dates$Date, as.character(all_3dates$Dispersal),
all_3dates$Salinity_Treat))
names(graph_dat3) <- c("Date", "Dispersal","Salinity")
graph_dat3$Point1 <- all_pcoa$points[,1]
graph_dat3$Point2 <- all_pcoa$points[,2]
cent1.g <- group_by(graph_dat3, Date, Dispersal, Salinity)
cent1.gs <- summarise(cent1.g, Axis1=mean(Point1),sd1 = sd(Point1),
Axis2 = mean(Point2), sd2 = sd(Point2))
cent1.gs <- data.frame(cent1.gs)
cent1.gs$Salinity <- factor(as.character(cent1.gs$Salinity),levels= c("0","5", "9", "13"))
cent1.gs$date2 <- rep(c(0,18,45), each = 11)
g1 <- ggplot(data= cent1.gs, aes(Axis1, Axis2)) +
geom_point(aes(color=Salinity, shape=as.factor(Dispersal)), size = 5)
g2 <- g1 + geom_errorbar(aes(ymax= Axis2+sd2, ymin= Axis2-sd2)) +
geom_errorbarh(aes(xmax=Axis1+sd1, xmin=Axis1-sd1))+ scale_color_brewer(type = "seq",palette = "Dark2")+
labs(shape="Dispersal") + ylim(-0.6,0.6)+ xlim(-0.6,0.6)+
scale_shape_manual(values=c(17, 15, 18,19), labels = c("Source","Control","Mixed Salt and Fresh","Salt Only"))
g3 <- g2 + facet_wrap(~date2, ncol = 1)
(g4 <- g3 + xlab("PCoA 1 (36.1%)") + ylab("PCoA 2 (14.5%)"))
# no source pcoa
csi.full.ns <- read.csv("csi.full.ns.csv")
# source only pcoa
csi.relabun.full2 <- read.csv("csi.relabun.full2.csv") #make distance matrix
## run pcoa with all tanks together for supplement
all <- left_join(csi.full.ns,csi.relabun.full2)
names(all)
head(all)
csi.relabun.full2
csi.full.ns
?left_join
# source only pcoa
csi.relabun.full2 <- read.csv("csi.relabun.full2.csv") #make distance matrix
str(csi.relabun.full2)
setwd("~/GitHub/Species-Traits")
## construct prior distributions for parameters from literature values
library(tidyverse)
library(fitdistrplus)
lit <- read.csv("literature_extraction.csv")
not_all_na <- function(x) !all(is.na(x))
lit_clean <- (lit
%>% drop_na(daphnia_reproduction)   ## drop rows with no response
%>% select_if(not_all_na)
)
lit_clean
## would like to select columns that aren't all NAs to make sure i don't miss any important information in my select....
n1 <- lit %>% drop_na(nitrification)%>% select_if(not_all_na)   ## drop rows with no response
head(n1)
## nitrification
n <- lit %>%dplyr::select("Replicates","nitrification","units.6", "convert_mg_N_day", "sd.2","range.2","X75.quartile","Title") %>%
filter(nitrification != "NA") ## VSS is volatile suspended solid...
n
## nitrification
n <- lit %>%dplyr::select("Replicates","nitrification","units.6", "convert_mg_N_day", "sd.2","range.2","X75.quartile","Title") %>%
filter(nitrification != "NA") ## VSS is volatile suspended solid...
n
## nitrification
n <- lit %>%dplyr::select("Replicates","nitrification","units.6", "convert_mg_N_day", "sd.2","range.2","X75.quartile") %>%
filter(nitrification != "NA") ## VSS is volatile suspended solid...
n
## daphnia adult excretion
x <- lit %>% dplyr::select("Replicates", "Excretion.rate", "sd_error_excretion", "units_excretion", "algal_conc") %>%
filter(Excretion.rate != "NA") %>% filter(units.6 != "g NH4-N g per VSS per day")
## nitrification
n <- lit %>%dplyr::select("Replicates","nitrification","units.6", "convert_mg_N_day", "sd.2","range.2","X75.quartile") %>%
filter(nitrification != "NA")%>% filter(units.6 != "g NH4-N g per VSS per day") ## VSS is volatile suspended solid...
n
lit <- read.csv("literature_extraction.csv")
## nitrification
n <- lit %>%dplyr::select("Replicates","nitrification","units.6", "convert_mg_N_day", "sd.2","range.2","X75.quartile") %>%
filter(nitrification != "NA")%>% filter(units.6 != "g NH4-N g per VSS per day") ## VSS is volatile suspended solid...
n
## nitrification
n <- lit %>%dplyr::select("Replicates","nitrification","units.6", "convert_mg_N_day", "sd.2","range.2","X75.quartile") %>%
filter(nitrification != "NA")%>% filter(units.6 != "g NH4-N g per VSS per day") %>% drop.na(convert_mg_N_day) ## VSS is volatile suspended solid...
?drop.na
??drop_na
## nitrification
n <- lit %>%dplyr::select("Replicates","nitrification","units.6", "convert_mg_N_day", "sd.2","range.2","X75.quartile") %>%
filter(nitrification != "NA")%>% filter(units.6 != "g NH4-N g per VSS per day") %>% tidyr::drop.na(convert_mg_N_day) ## VSS is volatile suspended solid...
## nitrification
n <- lit %>%dplyr::select("Replicates","nitrification","units.6", "convert_mg_N_day", "sd.2","range.2","X75.quartile") %>%
filter(nitrification != "NA")%>% filter(units.6 != "g NH4-N g per VSS per day") %>% drop_na(convert_mg_N_day) ## VSS is volatile suspended solid...
n
fitdist(n, "lnorm")
fitdist(n$convert_mg_N_day, "lnorm")
d <- fitdist(n$convert_mg_N_day, "lnorm")
p <- ggplot(n) +
geom_histogram(aes(x = nitrification, y = ..density..),
binwidth = .5, fill = "grey", color = "black")+
scale_x_continuous(limits=c(0,1))
p
p <- ggplot(n) +
geom_histogram(aes(x = nitrification, y = ..density..),
binwidth = .5, fill = "grey", color = "black") #+
p
p <- ggplot(n) +
geom_histogram(aes(x = convert_mg_N_day, y = ..density..),
binwidth = .5, fill = "grey", color = "black") #+
p
## compute the function on the fly
dlfun <- function(x) {
with(as.list(d$estimate), dlnorm(x, meanlog, sdlog))
}
p + stat_function(fun=dlfun, color="red")
p <- ggplot(n) +
geom_histogram(aes(x = convert_mg_N_day, y = ..density..),
binwidth = 1, fill = "grey", color = "black")
p + stat_function(fun=dlfun, color="red")
p <- ggplot(n) +
geom_histogram(aes(x = convert_mg_N_day, y = ..density..),
binwidth = .2, fill = "grey", color = "black")
p + stat_function(fun=dlfun, color="red")
max(n$convert_mg_N_day)
min(n$convert_mg_N_day)
n$convert_mg_N_day
n
## nitrification
n <- lit %>%dplyr::select("Replicates","nitrification","units.6", "convert_mg_N_day", "sd.2","range.2","X75.quartile") %>%
filter(nitrification != "NA")%>% filter(units.6 != "g NH4-N g per VSS per day") %>%
drop_na(convert_mg_N_day) %>% filter(units.6 != "mg N per g per dry weight day")
d <- fitdist(n$convert_mg_N_day, "lnorm")
p <- ggplot(n) +
geom_histogram(aes(x = convert_mg_N_day, y = ..density..),
binwidth = .2, fill = "grey", color = "black")
## compute the function on the fly
dlfun <- function(x) {
with(as.list(d$estimate), dlnorm(x, meanlog, sdlog))
}
p + stat_function(fun=dlfun, color="red")
d
setwd("~/GitHub/Species-Traits/Nitrogen_Algae")
library(tidyverse)
ammonium <- read.csv("Nh4_Air.csv")
#same early morning machine problem
ammonium <- ammonium %>%
filter(Rep != 1 & Rep != 15 & Rep != 52) ## not sure about 52 but obvi outlier so check when measured
library(brms)
?brm
d
ff <- brm(diff|weights(weights_scaled) ~ 1+ (1|Rep), data = amm[-c(30,108,113),], family = gaussian(),
control = list(adapt_delta = 0.95), set_prior(lnorm(-1.79,1.87)))
ammonium <- ammonium %>% drop_na()
#same early morning machine problem
ammonium <- ammonium %>%
filter(Rep != 1 & Rep != 15 & Rep != 52) ## not sure about 52 but obvi outlier so check when measured
ammonium <- ammonium %>% group_by(Treat) %>% mutate(med_val = median(NH4)) %>%
mutate(weights = 1/(2/med_val)) ## 2 is 2 mg/L which is the obs error based on guide to YSI
amm  <- ammonium %>%
arrange(Treat, Rep, Day) %>%
group_by(Treat, Rep) %>%
mutate(diff = NH4 / lag(NH4)) %>%
ungroup %>%
mutate(weights_scaled = weights/max(weights), center_NH4 = NH4 - mean(NH4))
ff <- brm(diff|weights(weights_scaled) ~ 1+ (1|Rep), data = amm[-c(30,108,113),], family = gaussian(),
control = list(adapt_delta = 0.95), set_prior(lnorm(-1.79,1.87)))
ff <- brm(diff|weights(weights_scaled) ~ 1+ (1|Rep), data = amm[-c(30,108,113),], family = gaussian(),
control = list(adapt_delta = 0.95), set_prior(dlnorm(-1.79,1.87)))
ff <- brm(diff|weights(weights_scaled) ~ 1+ (1|Rep), data = amm[-c(30,108,113),], family = gaussian(),
control = list(adapt_delta = 0.95), set_prior(dlnorm(-1.79,1.87), coef = "b"))
prs <- prior(dlnorm(-1.79,1.87), class='Intercept')
ff <- brm(diff|weights(weights_scaled) ~ 1+ (1|Rep), data = amm[-c(30,108,113),], family = gaussian(),
control = list(adapt_delta = 0.95), prior=prs)
prs <- prior(lognormal(-1.79,1.87), class='Intercept')
ff <- brm(diff|weights(weights_scaled) ~ 1+ (1|Rep), data = amm[-c(30,108,113),], family = gaussian(),
control = list(adapt_delta = 0.95), prior=prs)
ff1 <- summary(ff)
launch_shinystan(ff)
ff1
knitr::opts_chunk$set(echo = TRUE)
library(deSolve)
library(here)
e
library(deSolve)
library(here)
install.packages("here")
library(here)
state <- c(
ammonium = 10,
daph_j = 0,
daph_a = 20,
algae  = 20
)
param <- read.csv(here("RDS_compiled/parameters_no_cerio.csv"))
parameters <- c(
alpha = 0.5983917,    #mg N/(ug chl*day)
kappa = 0.2153469,    #mg N
e =  12,               #ug chl/mgN
death1 = 7,         # 1/day
fa = median(param$a_feed_m),       # ug chl/(daphniaA*day)
fj = median(param$j_feed_m),       # ug chl/(daphniaj*day)
rho = 0.0785709,                    # mg N/ chl
camm = 1- median(param$amm_param_b),     # 1/day
xa = median(param$a_exc_m),       # mg N/ (daphniaA*day)
xj= median(param$j_exc_m),        # mg N/ (daphniaJ*day)
g1 =median(param$growth_a),        # daphniaD/(daphniaJ*day)
g2=median(param$growth_b),         # ug chl
death2 = 1/median(param$death_b),   # 1/day
b1 = median(param$fec_a),       # daphniaJ/(daphniaD*day)
b2 = median(param$fec_b),        # ug chl
death3 = 1/median(param$death_b)  # 1/day
)
full_equations <-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# ammonium is added from release by both juvenile and adult daphnia  and lost through algal update and nitritfication
dammonium <- -(alpha*ammonium)/(kappa+ammonium)*algae + rho*death1*algae - camm*ammonium + daph_a*xa + daph_j*xj
#juvenile daphia are added by density dependent (large daphnia) birth
ddaph_j <- daph_a*(b1*algae)/(b2+algae) - daph_j*death3
#daphnia adults are added from growth by juveniles and are lost from death
ddaph_a <- daph_j*(g1*algae)/(g2+algae) - daph_a*death3
# algae is added from growth based on uptake of ammonium
dalgae <- (alpha*ammonium)/(kappa+ammonium)*algae*e - death1*algae- daph_a*fa - daph_j*fj
# return the rate of change
list(c(dammonium, ddaph_j,ddaph_a,dalgae))
})
}
out <- ode(y = state, times = seq(0,100,0.1), func = full_equations, parms = parameters)
plot(out)
