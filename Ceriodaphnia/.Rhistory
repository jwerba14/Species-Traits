summary(surv)
head(daph_adult_death)
data(leukemia, package = "survival")
leukemia <- as_data_frame(leukemia)
leukemia
unique(leukemia$x)
install.packages("survivalstan")
stan_weibull_survival_model_data <-
list(
## Number of event individuals
Nobs = sum(daph_adult_death$censor == 1),
## Number of censored individuals
Ncen = sum(daph_death_adult$censor == 0),
## Number of covariates
#M_bg = 0,
## Times for event individuals
yobs = daph_death_adult$days_adult[daph_death_adult$censor == 1],
## Times for censored individuals
ycen = daph_death_adult$days_adult[daph_death_adult$censor == 0]
## Covariates for event individuals as a matrix - i don't have any??
)
daph <- read.csv("daphnia_lifetime.csv")
daph <- daph %>%
filter(adult_only=="N")
dA <-  daph %>%
filter(size_class == "A")
daph_adult_death <-  dA %>%
group_by(rep,treatment) %>%
summarize(days_adult = n(),
chl = mean(chl_avg),
chl_sd_rep = sd(chl_avg))
daph_adult_death$censor <- as.numeric(1)
left_join(daph_adult_death, dA)
daph_adult_death1 <- daph_adult_death %>% filter(treatment == 25)
stan_weibull_survival_model_data <-
list(
## Number of event individuals
Nobs = sum(daph_adult_death1$censor == 1),
## Number of censored individuals
Ncen = sum(daph_death_adult1$censor == 0),
## Number of covariates
#M_bg = 0,
## Times for event individuals
yobs = daph_death_adult1$days_adult[daph_death_adult$censor == 1],
## Times for censored individuals
ycen = daph_death_adult1$days_adult[daph_death_adult$censor == 0]
## Covariates for event individuals as a matrix - i don't have any??
)
daph_adult_death1 <- daph_adult_death %>% filter(treatment == 25)
stan_weibull_survival_model_data <-
list(
## Number of event individuals
Nobs = sum(daph_adult_death1$censor == 1),
## Number of censored individuals
Ncen = sum(daph_death_adult1$censor == 0),
## Number of covariates
#M_bg = 0,
## Times for event individuals
yobs = daph_death_adult1$days_adult[daph_death_adult$censor == 1],
## Times for censored individuals
ycen = daph_death_adult1$days_adult[daph_death_adult$censor == 0]
## Covariates for event individuals as a matrix - i don't have any??
)
head(daph_adult_death1)
daph_adult_death1$censor
sum(daph_adult_death1$censor == 1)
stan_weibull_survival_model_data <-
list(
## Number of event individuals
Nobs = sum(daph_adult_death1$censor == 1),
## Number of censored individuals
Ncen = sum(daph_death_adult1$censor == 0),
## Number of covariates
#M_bg = 0,
## Times for event individuals
yobs = daph_death_adult1$days_adult[daph_death_adult$censor == 1],
## Times for censored individuals
ycen = daph_death_adult1$days_adult[daph_death_adult$censor == 0]
## Covariates for event individuals as a matrix - i don't have any??
)
list(
## Number of event individuals
Nobs = sum(daph_adult_death1$censor == 1),
## Number of censored individuals
Ncen = sum(daph_death_adult1$censor == 0),
## Number of covariates
#M_bg = 0,
## Times for event individuals
yobs = daph_death_adult1$days_adult[daph_death_adult$censor == 1],
## Times for censored individuals
ycen = daph_death_adult1$days_adult[daph_death_adult$censor == 0]
## Covariates for event individuals as a matrix - i don't have any??
)
Nobs = sum(daph_adult_death1$censor == 1)
Ncen = sum(daph_death_adult1$censor == 0)
stan_weibull_survival_model_data <-
list(
## Number of event individuals
Nobs = sum(daph_adult_death1$censor == 1),
## Number of censored individuals
Ncen = sum(daph_adult_death1$censor == 0),
## Number of covariates
#M_bg = 0,
## Times for event individuals
yobs = daph_adult_death1$days_adult[daph_adult_death1$censor == 1],
## Times for censored individuals
ycen = daph_adult_death1$days_adult[daph_adult_death1$censor == 0]
## Covariates for event individuals as a matrix - i don't have any??
)
fit <-
rstan::stan(adult_death_stan,
data = stan_weibull_survival_model_data,
chains = 1,
iter = 1000,
seed = 1328025050
)
setwd("C:/Users/Jo/OneDrive/Documents/GitHub/Species-Traits/Daphnia")
fit <-
rstan::stan(adult_death_stan,
data = stan_weibull_survival_model_data,
chains = 1,
iter = 1000,
seed = 1328025050
)
fit <-
rstan::stan(adult_death.stan,
data = stan_weibull_survival_model_data,
chains = 1,
iter = 1000,
seed = 1328025050
)
getwd()
fit <-
rstan::stan(file = "adult_death.stan",
data = stan_weibull_survival_model_data,
chains = 1,
iter = 1000,
seed = 1328025050
)
if (!require(biostan))
devtools::install_github('jburos/biostan')
install.packages("devtools")
biostan
if (!require(biostan))
devtools::install_github('jburos/biostan')
library(biostan)
fit <-
rstan::stan(file = "adult_death.stan",
data = stan_weibull_survival_model_data,
chains = 1,
iter = 1000,
seed = 1328025050
)
fit <-
rstan::stan(file = "adult_death.stan",
data = stan_weibull_survival_model_data,
chains = 1,
iter = 1000,
seed = 1328025050
)
source("../transfer_functions.R")
install.packages("deSolve")
source("../transfer_functions.R")
daph <- read.csv("daphnia_lifetime.csv")
daph <- daph %>%
filter(adult_only=="N")
## to get fecundity parameter fit saturating curve (params z and w in full ode)
## need to make per day so need to divide total fecundity by # of days that individual was an adult
daph_fec <- daph %>% group_by(rep, treatment) %>%
filter(size_class == "A") %>%
summarize(
time_adult = n()
, life_fec   = sum(clutch_size, na.rm = TRUE)
, chl        = mean(chl_avg)
, chl_sd_rep = sd(chl_avg)) %>%
mutate(daily_fec = life_fec / time_adult)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
daph_fec_r <- daph_fec %>% select(rep, chl, daily_fec)
daph_fec_r$rep <- seq(1,70)
daph_fec_r <- data.frame(daph_fec_r)
daph_fec_list <- list(
"N" = 70,
"chl" = daph_fec_r$chl,
"daily_fec" = daph_fec_r$daily_fec
)
fit <- stan(file = "fec_stan.stan",
data = daph_fec_list,
control = list(adapt_delta = 0.95))
setwd("C:/Users/Jo/OneDrive/Documents/GitHub/Species-Traits/Ceriodaphnia")
source(nh4_prac)
#source(nh4_prac)
cerio <- read.csv("cerio_pop.csv")
cerio["Population"][is.na(cerio["Population"])] <- 1
cerio1 <- cerio[cerio$Rep==1,]
mod <- nls(Population~logist(r=r,k=k,t=Day,a0=3.35),data = cerio1,start = list(r=1,k=50))
cerio2 <- cerio[cerio$Rep==12,]
mod2 <- nls(Population~logist(r=r,k=k,t=Day,a0=3.35),data = cerio2,start = list(r=.1,k=5))
fit_nls <- function(subdat, par_names=c("r","k")) {
nls_fit <- try(
nls(chl~logist(r=r,k=k,t=date1,a0=start_chl),data=subdat,start = list(r=1,k=50)),
silent = TRUE
)
p = 1
while (class(nls_fit) == "try-error") {
start_r <- rlnorm(1, -2, 1)
start_k <- rlnorm(1, 3, 3)
nls_fit <- try(
nls(chl~logist(r=r,k=k,t=date1,a0=start_chl),data=subdat,start = list(r=start_r,k=start_k)),
silent = TRUE
)
p = p + 1
if (p > 100) { break }
}
col_names <- c(outer(par_names,c("est","se"),paste,sep="_"))
if(class(nls_fit) == "try-error") {
pp <- rep(NA,4) ## FIXME: get the right number of NAs programmatically
## FIXME: will fail if first group is bad
} else {
coef_tab <- coef(summary(nls_fit))
pp <- c(coef_tab[,c("Estimate","Std. Error")])
}
## collapse results to a one-row matrix
dd <- data.frame(matrix(pp,nrow=1))
names(dd) <- col_names
return(dd)
}
c2 <- cerio %>%
group_by(Rep) %>%
mutate(start_chl = Avg_Chl[1])  ## this is a bit weird and not right bc should be constant throughout so maybe just have too many parameters
ults <- c2 %>% do(fit_nls(.))
ults
# read in
dat <- read.csv("cerio_pop.csv")
#average chlor by week
# create week column
dat$week <- floor(dat$Day/7)
#create average chl by week
week_chl <- dat %>%
group_by(Rep,week) %>%
summarise(aver_chl = mean(Avg_Chl, na.rm = TRUE),
pop = mean(Population, na.rm = TRUE),
sd_chl = sd(Avg_Chl,na.rm = TRUE),
sd_pop = sd(Population, na.rm = TRUE),
treat= mean(Treatment))
(gg2 <- ggplot(aes(week, log(pop)), data = week_chl) +
geom_point(aes(color= as.factor(treat))) + facet_wrap(~Rep))
(gg2 <- ggplot(aes(week, (pop)), data = week_chl) +
geom_point(aes(color= as.factor(treat))) + facet_wrap(~Rep))
(gg2 <- ggplot(aes(week, (pop)), data = week_chl) +
geom_point(aes(color= as.factor(treat))) + facet_wrap(~Rep))
(gg2 <- ggplot(aes(week, (pop)), data = week_chl) +
geom_point(aes(color= as.factor(treat))) + facet_wrap(~Rep))
week_chl$per_capita <- week_chl$aver_chl/week_chl$pop
week_chl2 <- week_chl %>%
group_by(Rep) %>%
mutate(delta_pop = (c(pop,0)/c(0, pop))[-length(pop)],
treat= treat)
week_chl2 <- week_chl2 %>%
filter(delta_pop > 1 & delta_pop != Inf)
(newplot<- ggplot(aes(per_capita,delta_pop),data = week_chl2) +
geom_point(aes(color=as.factor(treat))) + facet_wrap(~as.factor(treat)) )
cerio1 <- cerio[cerio$Rep==1,]
#source(nh4_prac)
cerio <- read.csv("cerio_pop.csv")
cerio["Population"][is.na(cerio["Population"])] <- 1
cerio1 <- cerio[cerio$Rep==1,]
mod <- nls(Population~logist(r=r,k=k,t=Day,a0=3.35),data = cerio1,start = list(r=1,k=50))
mod
cerio2 <- cerio[cerio$Rep==12,]
mod2 <- nls(Population~logist(r=r,k=k,t=Day,a0=3.35),data = cerio2,start = list(r=.1,k=5))
str(cerio)
cerio_3 <- cerio %>% filter(Treatment == 3)
mod3 <- nls(Population~logist(r=r,k=k,t=Day,a0=3.35),data = cerio_3,start = list(r=1,k=8))
#source(nh4_prac)
cerio <- read.csv("cerio_pop.csv")
str(cerio)
cerio["Population"][is.na(cerio["Population"])] <- 1
cerio_25 <- cerio %>% filter(Treatment == 25)
mod3 <- nls(Population~logist(r=r,k=k,t=Day,a0=3.35),data = cerio_25,start = list(r=1,k=8))
??nlme
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
library(nlme)
setwd("C:/Users/Jo/OneDrive/Documents/GitHub/Species-Traits/Daphnia")
library(survminer)
library(survival)
daph <- read.csv("daphnia_lifetime.csv")
daph <- daph %>%
filter(adult_only=="N")
library(tidyverse)
daph <- daph %>%
filter(adult_only=="N")
dA <-  daph %>%
filter(size_class == "A")
daph_adult_death <-  dA %>%
group_by(rep,treatment) %>%
summarize(days_adult = n(),
chl = mean(chl_avg),
chl_sd_rep = sd(chl_avg))
daph_adult_death$censor <- as.numeric(1)
left_join(daph_adult_death, dA)
## with surviminer
surv_obj <- Surv(time = daph_adult_death$days_adult, event = daph_adult_death$censor)
surv <- survfit(surv_obj ~ daph_adult_death$treatment)
ggsurvplot(surv, data = daph_adult_death, pval = TRUE)
ggsurvplot(surv, data = daph_adult_death,
conf.int = TRUE,
break.time.by = 20,
risk.table = TRUE)
summary(surv)
?survfit
coef(surv)
setwd("~/GitHub/Species-Traits/Daphnia")
setwd("~/GitHub/Species-Traits/Daphnia")
## fit exponential death with stan
library(tidyverse)
daph <- read.csv("daphnia_lifetime.csv")
# filter out individuals that were NOT born in the conditions (original daphnia)
daph <- daph %>%
filter(adult_only=="N")
dA <-  daph %>%
filter(size_class == "A")
daph_adult_death <-  dA %>%
group_by(rep,treatment) %>%
summarize(days_adult = n(),
chl = mean(chl_avg),
chl_sd_rep = sd(chl_avg))
survcurve <- function(x) {
x <- c(0,sort(x))
tibble(day=x,frac_surv=seq(1,0,length.out=length(x)))
}
daph_surv_curves <- daph_adult_death %>%
group_by(treatment) %>%
do(survcurve(.$days_adult))
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
daph_death_list <- list(
"N" = 74,
"days" = daph_surv_curves$day,
"survival" = daph_surv_curves$frac_surv
)
fit <- stan(file = "adult_death.stan",
data = daph_death_list,
control = list(adapt_delta = 0.95))
daph_surv_curves
fit <- stan(file = "adult_death.stan",
data = daph_death_list,
control = list(adapt_delta = 0.95))
fit <- stan(file = "adult_death.stan",
data = daph_death_list,
control = list(adapt_delta = 0.95))
fit <- stan(file = "adult_death.stan",
data = daph_death_list,
control = list(adapt_delta = 0.95))
fit <- stan(file = "adult_death.stan",
data = daph_death_list,
control = list(adapt_delta = 0.95))
fit <- stan(file = "adult_death.stan",
data = daph_death_list,
control = list(adapt_delta = 0.95))
launch_shinystan(fit)
library(shinystan)
launch_shinystan(fit)
t <- rstan::extract(fit,permuted = FALSE)
a_pred <- rbind(t[,1,1],t[,2,1]) ## all rows, first chain, alpha
b_pred <- rbind(t[,1,2], t[,2,2])
?stan
setwd("~/GitHub/Species-Traits/Ceriodaphnia")
cerio <- read.csv("cerio_pop.csv")
cerio$week <- as.numeric(0)
## create column of weeks
for (i in 1:nrow(cerio)) {
if (cerio$Day[i] >=1 & cerio$Day[i] < 8) {
cerio$week[i] <- 1
} else if ( cerio$Day[i] >=8 & cerio$Day[i] < 15) {
cerio$week[i] <- 2
} else if ( cerio$Day[i] >=15 & cerio$Day[i] < 22) {
cerio$week[i] <- 3
} else if ( cerio$Day[i] >=22 & cerio$Day[i] < 29) {
cerio$week[i] <- 4
} else if ( cerio$Day[i] >=29 & cerio$Day[i] < 36) {
cerio$week[i] <- 5
} else if ( cerio$Day[i] >=36 & cerio$Day[i] < 43) {
cerio$week[i] <- 6
} else if ( cerio$Day[i] >=43 & cerio$Day[i] < 51) {
cerio$week[i] <- 7
}
}
head(cerio)
## need avg chl by week by rep
avg <- cerio %>% filter(Avg_Chl == unique(Avg_Chl))
## need avg chl by week by rep but first need to not include duplicated rows (due to multiple pop count)
avg <- cerio[!duplicated(cerio[, 11])
]
## need avg chl by week by rep but first need to not include duplicated rows (due to multiple pop count)
avg <- cerio[!duplicated(cerio[, 11]),]
nrow(avg)
nrow(cerio)
avg %>% filter(Treatment ==3, Rep == 1 )
avg <- avg %>%
group_by(Treatment,Rep, week) %>%
mutate(week_chl = average(Avg_Chl), week_chl_sd = sd(Avg_Chl))
avg <- avg %>%
group_by(Treatment,Rep, week) %>%
mutate(week_chl = mean(Avg_Chl), week_chl_sd = sd(Avg_Chl))
head(avg)
left_join(cerio,avg, by= c("Treatment","Rep"))
left_join(cerio,avg)
avg <- avg %>% select(Treatment,Rep, week, week_chl,week_chl_sd)
avg
left_join(cerio,avg)
full <- left_join(cerio,avg)
full <- full %>% select(Treatment,Rep, week, week_chl, week_chl_sd, Population, Day)
## get rid of days where I didn't count
full <- full %>% filter(Population != "NA")
full$percapita <- full$week_chl/ full$Population
## need dataframe with change in pop,
new <- full %>% group_by(Treatment, Rep,week) %>%
mutate(avg_pop = mean(Population))
head(new)
## remove duplicates
new1 <- new[!duplicated(new[, c(1,2,3)]),]
new1
## create r
final <- new1 %>%
arrange(week) %>%
mutate(diff = Population - lag(Population, default = first(Population)))
final
## create r
final <- new1 %>%
arrange(Treatment, Rep, week) %>%
mutate(diff = Population - lag(Population, default = first(Population)))
final
View(final)
lag(new1$Population)
## create r
final <- new1 %>%
arrange(Treatment, Rep, week) %>%
group_by(Treatment, Rep) %>%
summarise(diff = Population - lag(Population, default = first(Population)))
## create r
final <- new1 %>%
arrange(Treatment, Rep, week) %>%
group_by(Treatment, Rep) %>%
mutate(diff = Population - lag(Population, default = first(Population)))
head(final)
## create r
final <- new1 %>%
arrange(Treatment, Rep, week) %>%
group_by(Treatment, Rep) %>%
mutate(diff = avg_pop - lag(avg_pop, default = first(avg_pop)))
head(final)
final[1:30, ]
as.data.frame(final[1:30, ])
as.data.frame(final[30:60, ])
ggplot(final, aes(percapita, diff)) + geom_point(lwd = 3)
final$percapita <- final$week_chl/final$avg_pop
ggplot(final, aes(percapita, diff)) + geom_point(lwd = 3)
ggplot(final[final$percapita < 100,], aes(percapita, diff)) + geom_point(lwd = 3)
## create r
final <- new1 %>%
arrange(Treatment, Rep, week) %>%
group_by(Treatment, Rep) %>%
mutate(diff = avg_pop - lag(avg_pop, default = first(avg_pop))) %>%
filter(week != 1)
final$percapita <- final$week_chl/final$avg_pop
ggplot(final[final$percapita < 100,], aes(percapita, diff)) + geom_point(lwd = 3)
ggplot(final[final$percapita < 100,], aes(percapita, diff)) + geom_point(lwd = 3, aes(color = "Treatment"))
ggplot(final[final$percapita < 100,], aes(percapita, diff)) + geom_point(lwd = 3, aes(color = Treatment))
ggplot(final[final$percapita < 100,], aes(percapita, diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment)))
ggplot(final[final$percapita < 50,], aes(percapita, diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment)))
## create r
final <- new1 %>%
arrange(Treatment, Rep, week) %>%
group_by(Treatment, Rep) %>%
mutate(diff = avg_pop / lag(avg_pop, default = first(avg_pop))) %>%
filter(week != 1)
final$percapita <- final$week_chl/final$avg_pop
ggplot(final[final$percapita < 100,], aes(percapita, diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment)))
ggplot(final[final$percapita < 100,], aes(percapita, diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment))) +
facet_wrap(~Treatment)
ggplot(final[final$percapita < 100,], aes(log(percapita), diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment))) +
facet_wrap(~Treatment)
ggplot(final[final$percapita < 100,], aes(lag(log(percapita)), diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment))) +
facet_wrap(~Treatment)
ggplot(final[final$percapita < 100,], aes(lag(log(percapita)), diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment)))
ggplot(final[final$percapita < 100,], aes((log(percapita)), diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment)))
ggplot(final[final$percapita < 100,], aes(lag(log(percapita)), diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment)))
ggplot(final, aes(lag(log(percapita)), diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment)))
ggplot(final, aes(lag((percapita)), diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment)))
ggplot(final[final$percapita < 100,], aes(lag((percapita)), diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment)))
lm(data = final, diff ~ lag(log(percapita)))
lm(data = final, diff ~ lag(log(percapita)), na.rm = TRUE)
final <- final %>% group_by(Treatment, Rep) %>%
mutate(loglagper = log(lag(percapita)))
head(final)
## create r
final <- new1 %>%
arrange(Treatment, Rep, week) %>%
group_by(Treatment, Rep) %>%
mutate(diff = avg_pop / lag(avg_pop, default = first(avg_pop)), percapita = week_chl/avg_pop) %>%
mutate(loglagper = log(lag(percapita))) %>%
filter(week != 1)
head(final)
ggplot(final, aes(loglagper, diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment)))
lm(data = final, diff ~ loglagper)
ggplot(final, aes(loglagper, diff)) + geom_point(lwd = 3, aes(color = as.factor(Treatment))) + geom_smooth(method = "lm")
