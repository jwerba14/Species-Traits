library(vegan)
?rda
?cmdscale
?cca
setwd("C:/Users/Jo/OneDrive/Documents/GitHub/Species-Traits")
library(tidyverse)
source("transfer_functions.R")
daph <- read.csv("daphnia_lifetime.csv")
# filter out individuals that were NOT born in the conditions (original daphnia)
daph <- daph %>%
filter(adult_only=="N")
## to get fecundity parameter fit saturating curve (params z and w in full ode)
## need to make per day so need to divide total fecundity by # of days that individual was an adult
daph_fec <- daph %>% group_by(rep, treatment) %>%
filter(size_class == "A") %>%
summarize(
time_adult = n()
, life_fec   = sum(clutch_size, na.rm = TRUE)
, chl        = mean(chl_avg)
, chl_sd_rep = sd(chl_avg)) %>%
mutate(daily_fec = life_fec / time_adult)
fec_param <- nls(daily_fec ~ sat_fun(z,w,chl), data = daph_fec[daph_fec$daily_fec > 0.1,],
start = list(z=1,w=1))
fec_param1 <- nls(daily_fec ~ sig_fun(z,w,t,chl), data = daph_fec[daph_fec$daily_fec > 0.1,],
start = list(z=1,w=1,t=2))
newdat <- data.frame(
chl = rep(seq(0, max(daph_fec$chl), length = 200), 2),
daily_fec = c(predict(fec_param, newdata = data.frame(chl = seq(0, max(daph_fec$chl), length = 200)))
, predict(fec_param1, newdata = data.frame(chl = seq(0, max(daph_fec$chl), length = 200)))),
model = rep(c("sat", "sig"), each = 200)
)
ggplot(data = daph_fec, aes(chl, daily_fec)) + geom_point()+
geom_line(data = newdat, aes(chl, daily_fec, colour = model))
## look at some patterns in fecundity
ggplot(daph, aes(chl_avg, clutch_size)) + geom_point(aes(colour = as.factor(treatment)))
ggplot(daph_fec, aes(chl, daily_fec)) + geom_point()
daph_fec_sum <- daph_fec %>%
group_by(treatment) %>%
summarise(life_fec_avg = mean(life_fec), life_fec_sd = sd(life_fec), chl_avg = mean(chl), chl_sd = sd(chl))
##time until death
dA <-  daph %>%
filter(size_class == "A")
daph_adult_death <-  dA %>%
group_by(rep,treatment) %>%
summarize(days_adult = n(),
chl = mean(chl_avg),
chl_sd_rep = sd(chl_avg))
## quick and dirty survival curve
ggplot(daph_adult_death, aes(days_adult, colour=factor(treatment)))+
stat_ecdf()+coord_flip()
survcurve <- function(x) {
x <- c(0,sort(x))
tibble(day=x,frac_surv=seq(1,0,length.out=length(x)))
}
daph_surv_curves <- daph_adult_death %>%
group_by(treatment) %>%
do(survcurve(.$days_adult))
ggplot(daph_surv_curves,
aes(day,frac_surv,colour=factor(treatment)))+
geom_step()+
stat_function(fun=function(x) exp(-x/20), lwd=2)
adult_death <- nls(days_adult ~ sat_fun(a,b,k=chl), data = daph_adult_death[daph_adult_death$days_adult > 1, ],
start = list(a=0.1,b=0.1))
np <- 1001
newdat <- data.frame(
#  chl = daph_adult_death[daph_adult_death$days_adult > 1, ]$chl,
chl = seq(0, max(daph_fec$chl), length = np),
days_adult = predict(adult_death, newdata = data.frame(chl = seq(0, max(daph_fec$chl), length = np)))
)
ggplot(data = daph_adult_death, aes(chl, 1/days_adult)) + geom_point()+
geom_line(data = newdat, aes(chl, 1/days_adult)) +
scale_x_log10()
adult_death
library(deSolve)
state <- c(dammonium = 10,
daph_j = 0,
daph_a = 10,
dalgae = 50
)
#parameters- will need parameters for each function
parameters <- c(
a = 0.1,b = 0.1,  # daphnia adult release Nh4
c= 0.01, d = 0.01, # daphnia juv release Nh4
dj =0.000001 , drj = 0.000001, # daphnia juv death
dm =22.42625, drm = 0.03606, # daphnia adult death
alpha = 4.379716e-03, beta = 2.335828e+01,
death1 = 7.698981e-03, death2 = 3.331607e-04,
gamma = 1.193833e-01, omega = 1.663828e+01,
z =9.828, w = 20.512, # birth of juvenile daphnia
cammonium = 0.04085, # proportional ammonium lost to env-- calc in nutrient_air.R
l =.000026, m= -448,  # uptake of algae by juvenile hollings type II
j = 0.0000939, k= 10.7 # uptake of algae by adult daphnia hollings type II
)
full_equations <-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
# ammonium is added from release by both juvenile and adult daphnia
dammonium <- daph_a*sat_fun(a,b,dalgae) + daph_j*sat_fun(c,d,dalgae)+
# also add a constant released based on density dependent death
daph_j*death(dj,daph_j)*drj + daph_a*death(dm,daph_a)*drm -
dalgae*dammonium*alpha*omega/(omega+dammonium) + gamma *(death1*dalgae + death2*(dalgae^2))-cammonium*dammonium
#juvenile daphia are added by density dependent (large daphnia) birth
ddaph_j <- sat_fun(z,w,dalgae)*daph_a -
#loss through death and growth -where they reach a certain threshold size --- don't know how to put that in
daph_j*death(dj,daph_j) - sat_fun(l,m,dalgae)*daph_j
#daphnia adults are added from growth by juveniles and are lost from death
ddaph_a <- sat_fun(l,m,dalgae)*daph_j- daph_a*death(dm,daph_a)
# algae is added from growth based on uptake of ammonium and nitrate #need to add contanst to mm
dalgae <- beta * dalgae*dammonium*alpha*omega/(omega+dammonium) - death1*dalgae - death2*(dalgae^2)
# algae is lost from being eaten by each of the 3 zooplankon
-daph_a*hollings2(j,k,dalgae) + daph_j*hollings2(l,m,dalgae)
# return the rate of change
list(c(dammonium, ddaph_j,ddaph_a,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = full_equations, parms = parameters)
plot(out)
nrow(daph)
str(daph)
unique(daph$treatment)
unique(daph$rep)
#parameters- will need parameters for each function
parameters <- c(
a = 0.1,b = 0.1,  # daphnia adult release Nh4
c= 0.01, d = 0.01, # daphnia juv release Nh4
dj =3/70 , drj = 0.000001, # daphnia juv death
dm =22.42625, drm = 0.03606, # daphnia adult death
alpha = 4.379716e-03, beta = 2.335828e+01,
death1 = 7.698981e-03, death2 = 3.331607e-04,
gamma = 1.193833e-01, omega = 1.663828e+01,
z =9.828, w = 20.512, # birth of juvenile daphnia
cammonium = 0.04085, # proportional ammonium lost to env-- calc in nutrient_air.R
l =.000026, m= -448,  # uptake of algae by juvenile hollings type II
j = 0.0000939, k= 10.7 # uptake of algae by adult daphnia hollings type II
)
full_equations <-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
# ammonium is added from release by both juvenile and adult daphnia
dammonium <- daph_a*sat_fun(a,b,dalgae) + daph_j*sat_fun(c,d,dalgae)+
# also add a constant released based on density dependent death
daph_j*dj*drj + daph_a*death(dm,daph_a)*drm -
dalgae*dammonium*alpha*omega/(omega+dammonium) + gamma *(death1*dalgae + death2*(dalgae^2))-cammonium*dammonium
#juvenile daphia are added by density dependent (large daphnia) birth
ddaph_j <- sat_fun(z,w,dalgae)*daph_a -
#loss through death and growth -where they reach a certain threshold size --- don't know how to put that in
daph_j*dj - sat_fun(l,m,dalgae)*daph_j
#daphnia adults are added from growth by juveniles and are lost from death
ddaph_a <- sat_fun(l,m,dalgae)*daph_j- daph_a*death(dm,daph_a)
# algae is added from growth based on uptake of ammonium and nitrate #need to add contanst to mm
dalgae <- beta * dalgae*dammonium*alpha*omega/(omega+dammonium) - death1*dalgae - death2*(dalgae^2)
# algae is lost from being eaten by each of the 3 zooplankon
-daph_a*hollings2(j,k,dalgae) + daph_j*hollings2(l,m,dalgae)
# return the rate of change
list(c(dammonium, ddaph_j,ddaph_a,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = full_equations, parms = parameters)
plot(out)
###growth to adult
daph_growth <- daph %>%
group_by(rep,treatment) %>%
filter(sum(size_class == "A") != 0)
daph_growth_j <- daph_growth %>%
filter(size_class=="J") %>%
group_by(treatment, rep) %>%
summarize(days_to_adult = n(), chl = mean(chl_avg), chl_sd = sd(chl_avg) )
## looks pretty constant
ggplot(data = daph_growth_j, aes(chl, days_to_adult))+ geom_point(aes(color= as.factor(treatment)))
##but needs to go through origin -because at 0 chl will not grow
grow <- nls(days_to_adult ~ sat_fun(a=a,b=b, k= chl), start= list(a=1, b=1), data = daph_growth_j)
grow
1/3.282
library(fitode)
source("transfer_functions.R")
dat <- read.csv("Algae_Nutrient.csv")
dat_nit_27 <- dat %>%
filter(treat == 27)
dat_nit_9 <- dat %>%
filter(treat == 9)
dat_nit_3 <- dat %>%
filter(treat == 3)
dat_nit_108 <- dat %>%
filter(treat == 108)
dat_nit_54 <- dat %>%
filter(treat == 54)
dat_nit_0.5 <- dat %>%
filter(treat == 0.5)
cammonium = 0.04085 # proportional ammonium lost to env-- calc in nutrient_air.R
chl_nh4_mod <- new("model.ode",
name = "algal_nit",
model = list(
pred_nh4 ~ -pred_chl*pred_nh4*alpha*omega/(omega+pred_nh4) + gamma *(death1*pred_chl + death2*(pred_chl^2))-cammonium*pred_nh4 ,
pred_chl ~ beta * pred_chl*pred_nh4*alpha*omega/(omega+pred_nh4) - death1*pred_chl - death2*(pred_chl^2)
),
## consider using bbmle::dnorm_n ?
observation = list(
nh4 ~ dnorm2(mean = pred_nh4),
chl ~ dnorm2(mean = pred_chl)
),
initial = list(pred_nh4 ~ pred_nh40 , pred_chl ~ pred_chl0),
par=c("alpha", "beta", "omega", "death1","death2", "pred_nh40", "pred_chl0", "gamma")
)
## maybe figure out initial values
start <- c(alpha = 0.03,
beta = 15,
omega=2.3,
death1=0.006,
death2=0.001,
pred_nh40 = 15 ,
pred_chl0 = 40,
gamma=0.01
)
ss <- ode.solve(chl_nh4_mod, 1:11, start,
solver.opts=list(method="rk4", hini=0.1))
plot(dat_nit_27$date1, dat_nit_27$nh4, ylim=c(0, 30))
lines(ss@solution$pred_nh4)
plot(dat_nit_27$date1, dat_nit_27$chl)
lines(ss@solution$pred_chl)
sum(dnorm(dat_nit_27$nh4, ss@solution$pred_nh4[match(dat_nit_27$date1, 1:11)], start[["sd1"]], log=TRUE)) +
sum(dnorm(dat_nit_27$chl, ss@solution$pred_chl[match(dat_nit_27$date1, 1:11)], start[["sd2"]], log=TRUE))
chl_fit_27_dd <- fitode(
chl_nh4_mod,
data = dat_nit_27,
start=start,
tcol = "date1",
solver.opts=list(method="rk4", hini=0.1)
)
plot(chl_fit_27_dd, level=0.95)
coef(chl_fit_27_dd)
plot(chl_fit_27_dd, level=0.95)
coef(chl_fit_27_dd)
start2 <- coef(chl_fit_27_dd)
start2[["pred_nh40"]] <- 6
start2[["pred_chl0"]] <- 50
##
chl_fit_9_dd <- fitode(
chl_nh4_mod,
data = dat_nit_9,
start=start2,
tcol = "date1",
solver.opts=list(method="rk4", hini=0.1)
#method="Nelder-Mead"
)
plot(chl_fit_9_dd, level=0.95)
start3 <- c(alpha = 0.003,
beta = 15,
omega=400,
death1=0.001,
death2=0.00003,
pred_nh40 = 3.5 ,
pred_chl0 = 40,
gamma=1,
sd1 = .2,
sd2 = 30)
plot(dat_nit_3$date1, dat_nit_3$nh4, ylim=c(0, 7))
chl_fit_3_dd <- fitode(
chl_nh4_mod,
data = dat_nit_3,
start=start3,
tcol = "date1",
solver.opts=list(method="rk4", hini=0.1)
#method="Nelder-Mead"
)
plot(chl_fit_3_dd, level=0.95)
start4 <- coef(chl_fit_27_dd)
start4[["pred_nh40"]] <- 22
start4[["pred_chl0"]] <- 40
chl_fit_54 <- fitode(
chl_nh4_mod,
data = dat_nit_54,
start=start4,
tcol = "date1" ,
solver.opts=list(method="rk4", hini=0.1)
#method="Nelder-Mead"
)
plot(chl_fit_54, level=0.95)
dev.new()
plot(chl_fit_27_dd, level=0.95)
plot(chl_fit_27_dd, level=0.95)
plot(chl_fit_9_dd, level=0.95)
plot(chl_fit_3_dd, level=0.95)
plot(chl_fit_54, level=0.95)
start5 <- coef(chl_fit_54)
start5[["pred_nh40"]] <- 40
start5[["pred_chl0"]] <- 40
chl_fit_108 <- fitode(
chl_nh4_mod,
data = dat_nit_108,
start=start5,
tcol = "date1",
solver.opts=list(method="rk4", hini=0.1))
plot(chl_fit_108,level = 0.95)
start6 <- coef(chl_fit_27_dd)
start6[["pred_nh40"]] <- 2.5
start6[["pred_chl0"]] <- 40
#### this isn't great-- will also fit with 54 starting starting values but that has worse fit
chl_fit_0.5 <- fitode(
chl_nh4_mod,
data = dat_nit_0.5,
start=start6,
tcol = "date1",
solver.opts=list(method="rk4", hini=0.1)
)
plot(chl_fit_0.5, level = 0.95)
chl_fit_0.5a <- fitode(
chl_nh4_mod,
data = dat_nit_0.5[dat_nit_0.5$nh4 < 4,],
start=start6,
tcol = "date1" ,
solver.opts=list(method="rk4", hini=0.1)
)
plot(chl_fit_0.5a, level = 0.95)
treat0.5 <- data.frame(confint(chl_fit_0.5a))
treat3 <- data.frame(confint(chl_fit_3_dd))
treat9 <- data.frame(confint(chl_fit_9_dd))
treat27 <- data.frame(confint(chl_fit_27_dd))
treat54 <- data.frame(confint(chl_fit_54))
treat108 <- data.frame(confint(chl_fit_108))
all_param <- data.frame(
model =  rep(c("chl_fit_0.5", "chl_fit_3","chl_fit_9","chl_fit_27","chl_fit_54","chl_fit_108"), each=8),
parameter = rep(names(start),6),
estimate = c(treat0.5$estimate,treat3$estimate,treat9$estimate,treat27$estimate,treat54$estimate,treat108$estimate),
lowcon = c(treat0.5$X2.5..,treat3$X2.5..,treat9$X2.5..,treat27$X2.5..,treat54$X2.5..,treat108$X2.5..),
uppcon =  c(treat0.5$X97.5..,treat3$X97.5..,treat9$X97.5..,treat27$X97.5..,treat54$X97.5..,treat108$X97.5..)
)
all_param$model <- factor(all_param$model, levels = c("chl_fit_0.5", "chl_fit_3","chl_fit_9","chl_fit_27","chl_fit_54","chl_fit_108"))
filter_param <- all_param %>%
filter(!(parameter %in% c("pred_nh40", "pred_chl0", "sd1", "sd2")))
ggplot(filter_param, aes(model,estimate)) +
geom_point() +
#geom_errorbar(aes(model, ymin=lowcon, ymax=uppcon)) +
scale_y_log10() +
facet_wrap(~parameter, scale="free_y")
head(start)
coef(chl_fit_0.5)
start
ggplot(filter_param, aes(model,estimate)) +
geom_point() +
#geom_errorbar(aes(model, ymin=lowcon, ymax=uppcon)) +
#scale_y_log10() +
facet_wrap(~parameter, scale="free_y")
chl_fit_3_dd <- fitode(
chl_nh4_mod,
data = dat_nit_3,
start=start,
tcol = "date1",
solver.opts=list(method="rk4", hini=0.1)
#method="Nelder-Mead"
)
plot(chl_fit_3_dd, level=0.95)
install.packages("corrplot")
library(corrplot)
v = vcov(chl_fit_27_dd)
corrplot(cov2cor(v))
cov2cor(v)
all_param
