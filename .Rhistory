ssqres1 = outdf1$ammonium- dat$nh4
ssqres2 = outdf1$algae - dat$chl
# return predicted vs experimental residual
return(ssqres1,ssqres2) }
parms=c(
da = 0.0003,
t = 20,
h = 5,
cammonium = .1
)
fitval=nls.lm(par=parms,fn=ssq)
state <- c(ammonium = dat$nh4[1],
algae = dat$chl[1]
)
fitval=nls.lm(par=parms,fn=ssq)
fitval=nls.lm(par=parms,state= state, fn=ssq)
fitval=nls.lm(param=parms,state= state, fn=ssq)
ssq <-function(t, state, par) {
with(as.list(c(state, par)),{
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) - cammonium*ammonium
# return the rate of change
list(c(dalgae, dammonium))
}) # end with(as.list ...
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
outdf <- data.frame(out)
#take only time points that match my data (so 11 points)
outdf1 <- outdf %>%
filter(time <= 1)
# Evaluate predicted vs experimental residual
ssqres1 = outdf1$ammonium- dat$nh4
ssqres2 = outdf1$algae - dat$chl
# return predicted vs experimental residual
return(ssqres1,ssqres2) }
parms=c(
da = 0.0003,
t = 20,
h = 5,
cammonium = .1
)
fitval=nls.lm(par=parms,state= state, fn=ssq)
?nls.lm
ssq <-function(par,t, state, ) {
with(as.list(c(par, state)),{
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) - cammonium*ammonium
# return the rate of change
list(c(dalgae, dammonium))
}) # end with(as.list ...
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
outdf <- data.frame(out)
#take only time points that match my data (so 11 points)
outdf1 <- outdf %>%
filter(time <= 1)
# Evaluate predicted vs experimental residual
ssqres1 = outdf1$ammonium- dat$nh4
ssqres2 = outdf1$algae - dat$chl
# return predicted vs experimental residual
return(ssqres1,ssqres2) }
ssq <- funtion(par) {
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
outdf <- data.frame(out)
#take only time points that match my data (so 11 points)
outdf1 <- outdf %>%
filter(time <= 1)
# Evaluate predicted vs experimental residual
ssqres1 = outdf1$ammonium- dat$nh4
ssqres2 = outdf1$algae - dat$chl
# return predicted vs experimental residual
return(ssqres1,ssqres2) }
ssq <- funtion(par) {
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
outdf <- data.frame(out)
#take only time points that match my data (so 11 points)
outdf1 <- outdf %>%
filter(time <= 1)
# Evaluate predicted vs experimental residual
ssqres1 = outdf1$ammonium- dat$nh4
ssqres2 = outdf1$algae - dat$chl
# return predicted vs experimental residual
return(ssqres1,ssqres2)
}
ssq <- function(par) {
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
outdf <- data.frame(out)
#take only time points that match my data (so 11 points)
outdf1 <- outdf %>%
filter(time <= 1)
# Evaluate predicted vs experimental residual
ssqres1 = outdf1$ammonium- dat$nh4
ssqres2 = outdf1$algae - dat$chl
# return predicted vs experimental residual
return(ssqres1,ssqres2)
}
parms=c(
da = 0.0003,
t = 20,
h = 5,
cammonium = .1
)
fitval=nls.lm(par=parms,state= state, fn=ssq)
fitval=nls.lm(par=parms, fn=ssq)
ssq <- function(par) {
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
outdf <- data.frame(out)
#take only time points that match my data (so 11 points)
outdf1 <- outdf %>%
filter(time <= 1)
# Evaluate predicted vs experimental residual
ssqres1 = outdf1$ammonium- dat$nh4
ssqres2 = outdf1$algae - dat$chl
# return predicted vs experimental residual
return(ssqres1)
}
fitval=nls.lm(par=parms, fn=ssq)
summary(fitval)
state <- c(ammonium = dat$nh4[1],
algae = dat$chl[1])
trial <-function(t, state, param) {
with(as.list(c(state, param)),{
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) - cammonium*ammonium
# return the rate of change
list(c(dalgae, dammonium))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
out
head(out)
state <- c(ammonium = dat$nh4[1:2],
algae = dat$chl[1:2])
trial <-function(t, state, param) {
dalgae <- state[3:4]
dammonium <- state[1:2]
with(as.list(c(state, param)),{
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) - cammonium*ammonium
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
# return the rate of change
list(c(dammonium,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
state <- c(ammonium = dat$nh4[1:2],
algae = dat$chl[1:2])
state <- c(ammonium = dat$nh4[1],
algae = dat$chl[1])
trial <-function(t, state, param) {
#algae <- state[3:4]
#ammonium <- state[1:2]
with(as.list(c(state, param)),{
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) - cammonium*ammonium
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
# return the rate of change
list(c(dammonium,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
head(out)
head(out,20)
param <- c(
da = 0.0003,
t = 20,
h = 5,
cammonium = .0000000001
)
trial <-function(t, state, param) {
#algae <- state[3:4]
#ammonium <- state[1:2]
with(as.list(c(state, param)),{
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) - cammonium*ammonium
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
# return the rate of change
list(c(dammonium,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
param <- c(
da = 0.0003,
t = 25,
h = 5,
cammonium = .0000000001
)
trial <-function(t, state, param) {
#algae <- state[3:4]
#ammonium <- state[1:2]
with(as.list(c(state, param)),{
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) - cammonium*ammonium
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
# return the rate of change
list(c(dammonium,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
head(out,20)
param <- c(
da = 0.03,
t = 25,
h = 5,
cammonium = .0000000001
)
trial <-function(t, state, param) {
#algae <- state[3:4]
#ammonium <- state[1:2]
with(as.list(c(state, param)),{
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) - cammonium*ammonium
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
# return the rate of change
list(c(dammonium,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
head(out)
param <- c(
da = 0.03,
t = 1,
h = 1,
cammonium = .0000000001
)
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
head(out)
plot(mich_men(5,1))
param <- c(
da = 0.03,
t = 1,
h = .0005,
cammonium = .0000000001
)
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
head(out)
head(out,20)
trial <-function(t, state, param) {
state_update <- list(ammonium = state[1],
algae = state[2])
with(as.list(c(state, param)),{
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) #- cammonium*ammonium
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
# return the rate of change
list(c(dammonium,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
head(out)
head(out,20)
state <- c(ammonium = dat$nh4,
algae = dat$chl)
trial <-function(t, state, param) {
state_update <- list(ammonium = state[1],
algae = state[2])
with(as.list(c(state, param)),{
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) #- cammonium*ammonium
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
# return the rate of change
list(c(dammonium,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
trial <-function(t, state, param) {
state_update <- list(ammonium = state[1],
algae = state[2])
with(as.list(c(state_update, param)),{
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) #- cammonium*ammonium
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
# return the rate of change
list(c(dammonium,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
nrow(dat)
View(dat)
state <- c(ammonium = dat$nh4[1:30],
algae = dat$chl[1:30])
trial <-function(t, state, param) {
state_update <- list(ammonium = state[1],
algae = state[2])
with(as.list(c(state_update, param)),{
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) #- cammonium*ammonium
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
# return the rate of change
list(c(dammonium,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
trial <-function(t, state, param) {
state_update <- (ammonium = matrix(state[1]),
algae = matrix(state[2]))
with(as.list(c(state_update, param)),{
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) #- cammonium*ammonium
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
# return the rate of change
list(c(dammonium,dalgae))
}) # end with(as.list ...
}
trial <-function(t, state, param) {
state_update <- list(ammonium = matrix(state[1]),
algae = matrix(state[2]))
with(as.list(c(state_update, param)),{
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) #- cammonium*ammonium
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
# return the rate of change
list(c(dammonium,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
state <- c(ammonium = dat$nh4[1:2],
algae = dat$chl[1:2])
str(state)
state
trial <-function(t, state, param) {
state_update <- list(ammonium = matrix(state[1:2]),
algae = matrix(state[3:4]))
with(as.list(c(state_update, param)),{
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) #- cammonium*ammonium
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
# return the rate of change
list(c(dammonium,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
head(out)
state <- c(ammonium = dat$nh4[1:30],
algae = dat$chl[1:30])
trial <-function(t, state, param) {
state_update <- list(ammonium = matrix(state[1:30]),
algae = matrix(state[31:60]))
with(as.list(c(state_update, param)),{
dammonium <-
# also add a constant released based on density dependent death
algae*da-
# lose from uptake and a density dependent (?) from air
algae*mich_men(t,h,ammonium) #- cammonium*ammonium
dalgae <- algae*mich_men(t,h,ammonium) -
# density dependent death
algae*da
# return the rate of change
list(c(dammonium,dalgae))
}) # end with(as.list ...
}
out <- ode(y = state, times = seq(0,100,0.1), func = trial, parms = param)
outdf <- data.frame(out)
str(outdf)
str(dat)
dat1 <- dat %>%
select(date1,nh4,chl,uni) %>%
spread(key = uni,nh4)
View(dat1)
dat1 <- dat %>%
select(date1,nh4,chl,uni) %>%
spread(key = uni,nh4, -date1, - chl)
dat1 <- dat %>%
select(nh4,uni) %>%
spread(key = uni,nh4)
dat1 <- dat %>%
select(nh4,uni)
head(dat1)
dat1 <- dat %>%
select(nh4,uni,date1) %>%
group_by(date1) %>%
spread(key = uni,nh4)
View(dat1)
dat_nh4 <- dat %>%
select(nh4,uni,date1) %>%
group_by(date1) %>%
spread(key = uni,nh4)
dat_chl <- dat %>%
select(chl,uni,date1) %>%
group_by(date1) %>%
spread(key = uni,chl)
str(outdf)
dat_nh4 <- dat %>%
select(nh4,uni,date1) %>%
group_by(date1) %>%
spread(key = uni,nh4) %>%
select(-date1,-uni)
dat_nh4 <- dat %>%
select(nh4,uni,date1) %>%
group_by(date1) %>%
spread(key = uni,nh4) %>%
select(-date1)
str(dat_nh4)
dat_nh4 <- dat %>%
select(nh4,uni,date1) %>%
group_by(date1) %>%
spread(key = uni,nh4)
head(dat_nh4)
str(dat_nh4)
dat_nh4 <- data.frame(dat %>%
select(nh4,uni,date1) %>%
group_by(date1) %>%
spread(key = uni,nh4))
str(dat_nh4)
dat_nh4 <- data.frame(dat %>%
select(nh4,uni,date1) %>%
group_by(date1) %>%
spread(key = uni,nh4) %>%
select(-date1))
dat_nh4 <- data.frame(dat %>%
select(nh4,uni,date1) %>%
group_by(date1) %>%
spread(key = uni,nh4))
View(dat_nh4)
dat_nh4 <- dat_nh4 %>%
select(-date1)
View(dat_nh4)
dat_chl <- dat %>%
select(chl,uni,date1) %>%
group_by(date1) %>%
spread(key = uni,chl)
dat_chl <- dat %>%
select(-date1)
str(outdf)
out_nh4 <- outdf1 %>%
select(contains("ammonium"))
str(out_nh4)
out_nh4 <- outdf1 %>%
select(starts_with("ammonium"))
out_nh4
out_nh4 <- outdf1 %>%
select(starts_with("ammo"))
out_nh4
?starts_with
out_nh4 <- outdf1 %>%
select(starts_with(ammo))
