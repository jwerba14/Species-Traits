install.packages("tidyverse")
library(tidyverse)
install.packages("lme4")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
install.packages("callr")
install.packages("processx")
setwd("C:/Users/Jo/OneDrive/Documents/GitHub/Species-Traits")
## simulate data
library(fitode)
## simulate data
devtools::install_github("parksw3/fitode")
install.packages("devtools")
## simulate data
devtools::install_github("parksw3/fitode")
library(fitode)
cammonium = 0.04085
chl_nh4_mod <- odemodel(
name = "algal_nit",
model = list(
pred_nh4 ~ -pred_chl*pred_nh4*alpha*omega/(omega+pred_nh4) + gamma *(death1*pred_chl + death2*(pred_chl^2))-cammonium*pred_nh4 ,
pred_chl ~ beta * pred_chl*pred_nh4*alpha*omega/(omega+pred_nh4) - death1*pred_chl - death2*(pred_chl^2)
),
## consider using bbmle::dnorm_n ?
observation = list(
nh4 ~ dnorm2(mean = pred_nh4),
chl ~ dnorm2(mean = pred_chl)
),
initial = list(pred_nh4 ~ pred_nh40 , pred_chl ~ pred_chl0),
par=c("alpha", "beta", "omega", "death1","death2", "pred_nh40", "pred_chl0", "gamma")
)
## maybe figure out initial values
start <- c(alpha = 0.03,
beta = 15,
omega=2.3,
death1=0.006,
death2=0.001,
pred_nh40 = 15 ,
pred_chl0 = 40,
gamma=0.01
)
ss <- ode.solve(chl_nh4_mod, 1:100, start,
solver.opts=list(method="rk4", hini=0.1))
plot(ss@solution$pred_nh4)
##### try simpler model
chl_nh4_mod2 <- odemodel(
name = "algal_nit",
model = list(
pred_nh4 ~ -a*pred_chl*(pred_nh4/(k+pred_nh4))+r*death*pred_chl,
pred_chl ~  a*pred_chl*(pred_nh4/(k+pred_nh4)) - death*pred_chl  ## but recy < or = to death
),
observation = list(
nh4 ~ dlnorm(meanlog =log(pred_nh4), sdlog = 0.2),
chl ~ dlnorm(meanlog = log(pred_chl),sdlog = 0.1)
),
initial = list(pred_nh4 ~ pred_nh40 , pred_chl ~ pred_chl0),
par=c("a","k", "r","death", "pred_nh40", "pred_chl0")
)
start <- c(a = 0.03,
k = .03,
r = 1,
death = 0.02,
pred_nh40= 15,
pred_chl0 = 40
)
s2 <-  simulate(chl_nh4_mod2,nsim = 5, parms= start, times = seq(1,40),
solver.opts=list(method="rk4", hini=0.1))
simdat2 <- data.frame(
nh4 = rnorm(s1@solution$pred_nh4, 0.5),
chl = rnorm(s1@solution$pred_chl,1),
date = seq(1,40,1))
fit <- fitode(
chl_nh4_mod2,
data = s2,
start=start,
tcol = "times",
solver.opts=list(method="rk4", hini=0.1)
)
warnings()
## good recovery of params try with fewer days
s2 <-  simulate(chl_nh4_mod2,nsim = 5, parms= start, times = seq(1,11),
solver.opts=list(method="rk4", hini=0.1))
fit <- fitode(
chl_nh4_mod2,
data = s2,
start=start,
tcol = "times",
solver.opts=list(method="rk4", hini=0.1)
)
coef(fit)
start2 <- c(a = 0.5,
k = .1,
r = 1,
death = 0.002,
pred_nh40= 15,
pred_chl0 = 40
)
fit2 <- fitode(
chl_nh4_mod2,
data = s2,
start=start2,
tcol = "times",
solver.opts=list(method="rk4", hini=0.1)
)
start2 <- c(a = 0.05,
k = .1,
r = 1,
death = 0.002,
pred_nh40= 15,
pred_chl0 = 40
)
fit2 <- fitode(
chl_nh4_mod2,
data = s2,
start=start2,
tcol = "times",
solver.opts=list(method="rk4", hini=0.1)
)
coef(fit2)
plot(fit2, level=0.95)
plot(fit, level= 0.95)
plot(s2$times, s2$chl)
plot(s2$times, s2$nh4)
plot(s1@solution$time,s1@solution$pred_chl)
s1 <- ode.solve(chl_nh4_mod2, 1:40, start,
solver.opts=list(method="rk4", hini=0.1))
plot(s1@solution$time,s1@solution$pred_chl)
plot(s1@solution$time,s1@solution$pred_nh4,log="y")
with(s1@solution, plot(pred_chl, pred_nh4, type="b", xlim=c(40,60),
ylim=c(0,20)))
with(s1B@solution, plot(pred_chl, pred_nh4, type="b", col=2))
matplot(s1B@solution[,-1],log="y")
